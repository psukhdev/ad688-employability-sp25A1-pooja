[
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Creating a Skill Level DataFrame",
    "section": "",
    "text": "import pandas as pd\n\nskills_data = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n    \"Python\": [5, 3, 4, 2],\n    \"SQL\": [4, 2, 5, 3],\n    \"Machine Learning\": [3, 1, 4, 2],\n    \"Cloud Computing\": [2, 2, 3, 1]\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\nAlice\n5\n4\n3\n2\n\n\nBob\n3\n2\n1\n2\n\n\nCharlie\n4\n5\n4\n3\n\n\nDavid\n2\n3\n2\n1\n\n\n\n\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 5))\nsns.heatmap(df_skills, annot=True, cmap=\"YlGnBu\", cbar=True)\nplt.title(\"Team Skill Matrix\")\nplt.show()\n\n\n\n\n\n\n\n\n\nCompare Team Skills to Industry Requirements\n\nfrom collections import Counter\n\n# Step 1: Define top industry skills\ntop_skills = [\"Python\", \"SQL\", \"Machine Learning\", \"Cloud Computing\", \"Docker\", \"AWS\"]\n\n# Step 2: Compare with team skills and fill gaps\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0  # Add missing skill column with 0s\n\n# Step 3: Re-visualize with added skill columns\nplt.figure(figsize=(10, 6))\nsns.heatmap(df_skills[top_skills], annot=True, cmap=\"YlGnBu\", linewidths=0.5)\nplt.title(\"Skill Gap Analysis: Team vs Industry\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPropose an Improvement Plan\n\n# Step 1: Filter skill gaps (score ≤ 2)\nskill_gaps = df_skills[top_skills] &lt;= 2\n\n# Step 2: Print suggestions\nfor name in df_skills.index:\n    for skill in top_skills:\n        if skill_gaps.loc[name, skill]:\n            print(f\"{name} should improve their skill in: {skill}\")\n\nAlice should improve their skill in: Cloud Computing\nAlice should improve their skill in: Docker\nAlice should improve their skill in: AWS\nBob should improve their skill in: SQL\nBob should improve their skill in: Machine Learning\nBob should improve their skill in: Cloud Computing\nBob should improve their skill in: Docker\nBob should improve their skill in: AWS\nCharlie should improve their skill in: Docker\nCharlie should improve their skill in: AWS\nDavid should improve their skill in: Python\nDavid should improve their skill in: Machine Learning\nDavid should improve their skill in: Cloud Computing\nDavid should improve their skill in: Docker\nDavid should improve their skill in: AWS"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load dataset (correct path syntax)\ndata = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\n\ndata.head()\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\nprint(data.columns)\n\nIndex(['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES',\n       'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL',\n       ...\n       'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME',\n       'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6',\n       'NAICS_2022_6_NAME'],\n      dtype='object', length=131)\nprint(data.columns.to_list)\n\n&lt;bound method IndexOpsMixin.tolist of Index(['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES',\n       'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL',\n       ...\n       'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME',\n       'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6',\n       'NAICS_2022_6_NAME'],\n      dtype='object', length=131)&gt;\nprint(', '.join(data.columns))\nprint(data.columns.tolist())\nprint(data.columns.values.tolist())\n\nID, LAST_UPDATED_DATE, LAST_UPDATED_TIMESTAMP, DUPLICATES, POSTED, EXPIRED, DURATION, SOURCE_TYPES, SOURCES, URL, ACTIVE_URLS, ACTIVE_SOURCES_INFO, TITLE_RAW, BODY, MODELED_EXPIRED, MODELED_DURATION, COMPANY, COMPANY_NAME, COMPANY_RAW, COMPANY_IS_STAFFING, EDUCATION_LEVELS, EDUCATION_LEVELS_NAME, MIN_EDULEVELS, MIN_EDULEVELS_NAME, MAX_EDULEVELS, MAX_EDULEVELS_NAME, EMPLOYMENT_TYPE, EMPLOYMENT_TYPE_NAME, MIN_YEARS_EXPERIENCE, MAX_YEARS_EXPERIENCE, IS_INTERNSHIP, SALARY, REMOTE_TYPE, REMOTE_TYPE_NAME, ORIGINAL_PAY_PERIOD, SALARY_TO, SALARY_FROM, LOCATION, CITY, CITY_NAME, COUNTY, COUNTY_NAME, MSA, MSA_NAME, STATE, STATE_NAME, COUNTY_OUTGOING, COUNTY_NAME_OUTGOING, COUNTY_INCOMING, COUNTY_NAME_INCOMING, MSA_OUTGOING, MSA_NAME_OUTGOING, MSA_INCOMING, MSA_NAME_INCOMING, NAICS2, NAICS2_NAME, NAICS3, NAICS3_NAME, NAICS4, NAICS4_NAME, NAICS5, NAICS5_NAME, NAICS6, NAICS6_NAME, TITLE, TITLE_NAME, TITLE_CLEAN, SKILLS, SKILLS_NAME, SPECIALIZED_SKILLS, SPECIALIZED_SKILLS_NAME, CERTIFICATIONS, CERTIFICATIONS_NAME, COMMON_SKILLS, COMMON_SKILLS_NAME, SOFTWARE_SKILLS, SOFTWARE_SKILLS_NAME, ONET, ONET_NAME, ONET_2019, ONET_2019_NAME, CIP6, CIP6_NAME, CIP4, CIP4_NAME, CIP2, CIP2_NAME, SOC_2021_2, SOC_2021_2_NAME, SOC_2021_3, SOC_2021_3_NAME, SOC_2021_4, SOC_2021_4_NAME, SOC_2021_5, SOC_2021_5_NAME, LOT_CAREER_AREA, LOT_CAREER_AREA_NAME, LOT_OCCUPATION, LOT_OCCUPATION_NAME, LOT_SPECIALIZED_OCCUPATION, LOT_SPECIALIZED_OCCUPATION_NAME, LOT_OCCUPATION_GROUP, LOT_OCCUPATION_GROUP_NAME, LOT_V6_SPECIALIZED_OCCUPATION, LOT_V6_SPECIALIZED_OCCUPATION_NAME, LOT_V6_OCCUPATION, LOT_V6_OCCUPATION_NAME, LOT_V6_OCCUPATION_GROUP, LOT_V6_OCCUPATION_GROUP_NAME, LOT_V6_CAREER_AREA, LOT_V6_CAREER_AREA_NAME, SOC_2, SOC_2_NAME, SOC_3, SOC_3_NAME, SOC_4, SOC_4_NAME, SOC_5, SOC_5_NAME, LIGHTCAST_SECTORS, LIGHTCAST_SECTORS_NAME, NAICS_2022_2, NAICS_2022_2_NAME, NAICS_2022_3, NAICS_2022_3_NAME, NAICS_2022_4, NAICS_2022_4_NAME, NAICS_2022_5, NAICS_2022_5_NAME, NAICS_2022_6, NAICS_2022_6_NAME\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL', 'ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS', 'MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD', 'SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS', 'LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL', 'ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS', 'MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD', 'SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS', 'LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create AI vs Non-AI flag\ndata['is_ai_job'] = data['TITLE_NAME'].str.contains('AI|Artificial Intelligence|Machine Learning|Data Scientist|ML|Deep Learning', case=False, na=False)\n\n# Compare average salary\nplt.figure(figsize=(8, 5))\nsns.boxplot(x='is_ai_job', y='SALARY_FROM', data=data)\nplt.title('Salary Comparison: AI vs Non-AI Jobs')\nplt.xlabel('Is AI Job?')\nplt.ylabel('Salary From')\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "eda.html#top-paying-regions-for-ai-vs-non-ai",
    "href": "eda.html#top-paying-regions-for-ai-vs-non-ai",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "2. Top Paying Regions (for AI vs Non-AI)",
    "text": "2. Top Paying Regions (for AI vs Non-AI)\n\n# Group by state and AI job status\nregion_salary = data.groupby(['STATE_NAME', 'is_ai_job'])['SALARY_FROM'].mean().reset_index()\n\n# Pivot for heatmap\npivot_data = region_salary.pivot(index='STATE_NAME', columns='is_ai_job', values='SALARY_FROM')\n\n# Heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_data, annot=True, fmt='.0f', cmap='coolwarm')\nplt.title('Average Salary by State: AI vs Non-AI')\nplt.xlabel('Is AI Job?')\nplt.ylabel('State')\nplt.show()"
  },
  {
    "objectID": "eda.html#remote-vs-in-office-salary-comparison",
    "href": "eda.html#remote-vs-in-office-salary-comparison",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "3. Remote vs In-Office Salary Comparison",
    "text": "3. Remote vs In-Office Salary Comparison\n\n# Remove NaN remote types\nremote_salary = data.dropna(subset=['REMOTE_TYPE_NAME'])\n\nplt.figure(figsize=(8, 5))\nsns.boxplot(x='REMOTE_TYPE_NAME', y='SALARY_FROM', data=remote_salary)\nplt.title('Remote vs In-Office Salary Comparison')\nplt.xlabel('Work Type')\nplt.ylabel('Salary From')\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "eda.html#industry-salary-trends-2023-vs-2024",
    "href": "eda.html#industry-salary-trends-2023-vs-2024",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "4. Industry Salary Trends (2023 vs 2024)",
    "text": "4. Industry Salary Trends (2023 vs 2024)\n\n# Convert POSTED to datetime and extract year\ndata['POSTED'] = pd.to_datetime(data['POSTED'], errors='coerce')\ndata['year'] = data['POSTED'].dt.year\n\n# Filter only 2023 and 2024\nsalary_trend = data[data['year'].isin([2023, 2024])]\n\n# Group by industry and year\nindustry_salary = salary_trend.groupby(['NAICS2_NAME', 'year'])['SALARY_FROM'].mean().reset_index()\n\n# Plot\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=industry_salary, x='year', y='SALARY_FROM', hue='NAICS2_NAME', marker='o')\nplt.title('Industry Salary Trends (2023 vs 2024)')\nplt.xlabel('Year')\nplt.ylabel('Average Salary From')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "eda.html#to-cleanfilter-the-salary-ranges",
    "href": "eda.html#to-cleanfilter-the-salary-ranges",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "To clean/filter the salary ranges",
    "text": "To clean/filter the salary ranges\n\n# Filter out rows with null salary\nsalary_clean = data[data['SALARY_FROM'].notnull()]\n\n# Calculate IQR\nQ1 = salary_clean['SALARY_FROM'].quantile(0.25)\nQ3 = salary_clean['SALARY_FROM'].quantile(0.75)\nIQR = Q3 - Q1\n\n# Define outlier bounds\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\n# Filter out outliers\nsalary_filtered = salary_clean[(salary_clean['SALARY_FROM'] &gt;= lower_bound) & (salary_clean['SALARY_FROM'] &lt;= upper_bound)]\n\nprint(f\"Original rows: {len(salary_clean)}\")\nprint(f\"Filtered rows (no outliers): {len(salary_filtered)}\")\n\nOriginal rows: 32408\nFiltered rows (no outliers): 31961\n\n\n\n# AI vs Non-AI plot after outlier removal\nplt.figure(figsize=(8, 5))\nsns.boxplot(x='is_ai_job', y='SALARY_FROM', data=salary_filtered)\nplt.title('Cleaned Salary Comparison: AI vs Non-AI Jobs')\nplt.xlabel('Is AI Job?')\nplt.ylabel('Salary From')\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "eda.html#top-paying-regions-cleaned-dataset",
    "href": "eda.html#top-paying-regions-cleaned-dataset",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "Top Paying Regions (Cleaned Dataset)",
    "text": "Top Paying Regions (Cleaned Dataset)\n\n# Group by STATE_NAME and is_ai_job using filtered dataset\nregion_salary_clean = salary_filtered.groupby(['STATE_NAME', 'is_ai_job'])['SALARY_FROM'].mean().reset_index()\n\n# Pivot for heatmap: rows = states, columns = AI/Non-AI\npivot_region_clean = region_salary_clean.pivot(index='STATE_NAME', columns='is_ai_job', values='SALARY_FROM')\n\n# Heatmap of average salaries\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_region_clean, annot=True, fmt='.0f', cmap='coolwarm', linewidths=0.5)\nplt.title('Top Paying Regions: AI vs Non-AI Jobs (Cleaned Data)')\nplt.xlabel('Is AI Job?')\nplt.ylabel('State')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "eda.html#remote-vs-in-office-salary-cleaned-dataset",
    "href": "eda.html#remote-vs-in-office-salary-cleaned-dataset",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "Remote vs In-Office Salary (Cleaned Dataset)",
    "text": "Remote vs In-Office Salary (Cleaned Dataset)\n\n# Drop rows with missing remote type info\nremote_clean = salary_filtered.dropna(subset=['REMOTE_TYPE_NAME'])\n\n# Plot salary comparison\nplt.figure(figsize=(8, 5))\nsns.boxplot(x='REMOTE_TYPE_NAME', y='SALARY_FROM', data=remote_clean)\nplt.title('Remote vs In-Office Salary Comparison (Cleaned Data)')\nplt.xlabel('Work Type')\nplt.ylabel('Salary From')\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# the average salary by type \nremote_avg = remote_clean.groupby('REMOTE_TYPE_NAME')['SALARY_FROM'].mean().sort_values(ascending=False)\nprint(remote_avg)\n\nREMOTE_TYPE_NAME\nRemote           96448.291407\nHybrid Remote    92644.764242\n[None]           91018.110741\nNot Remote       79461.976115\nName: SALARY_FROM, dtype: float64"
  },
  {
    "objectID": "eda.html#industry-salary-trends-cleaned-dataset",
    "href": "eda.html#industry-salary-trends-cleaned-dataset",
    "title": "1. AI vs. Non-AI Salary Comparison",
    "section": "Industry Salary Trends (Cleaned Dataset)",
    "text": "Industry Salary Trends (Cleaned Dataset)\n\n# Make sure 'POSTED' is in datetime format\nsalary_filtered['POSTED'] = pd.to_datetime(salary_filtered['POSTED'], errors='coerce')\n\n# Extract year\nsalary_filtered['year'] = salary_filtered['POSTED'].dt.year\n\n# Filter only 2023 and 2024\nindustry_clean = salary_filtered[salary_filtered['year'].isin([2023, 2024])]\n\n# Group by industry and year to calculate average salary\nindustry_salary_trend = industry_clean.groupby(['NAICS2_NAME', 'year'])['SALARY_FROM'].mean().reset_index()\n\n# Plot line chart of industry salary trends\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=industry_salary_trend, x='year', y='SALARY_FROM', hue='NAICS2_NAME', marker='o')\nplt.title('Industry Salary Trends (2023 vs 2024) - Cleaned Data')\nplt.xlabel('Year')\nplt.ylabel('Average Salary From')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\nC:\\Users\\pooja\\AppData\\Local\\Temp\\ipykernel_14952\\1923549133.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\pooja\\AppData\\Local\\Temp\\ipykernel_14952\\1923549133.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n\n\n\n\ntop_industries = industry_salary_trend[industry_salary_trend['year'] == 2024] \\\n    .nlargest(10, 'SALARY_FROM')['NAICS2_NAME'].tolist()\n\ntop_trend_data = industry_salary_trend[industry_salary_trend['NAICS2_NAME'].isin(top_industries)]\n\n# Re-plot for top industries only\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=top_trend_data, x='year', y='SALARY_FROM', hue='NAICS2_NAME', marker='o')\nplt.title('Top 10 Industry Salary Trends (2023 vs 2024)')\nplt.xlabel('Year')\nplt.ylabel('Average Salary From')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load dataset (correct path syntax)\ndata = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\n\n# Drop any missing values just in case\npdf = data[[\"NAICS2_NAME\", \"SALARY_FROM\"]].dropna()\n\n# Plot\nplt.figure(figsize=(10, 6))\nsns.boxplot(data=pdf, x=\"NAICS2_NAME\", y=\"SALARY_FROM\", color=\"#636EFA\")\n\n# Add labels and title\nplt.title(\"Salary Distribution by Industry\", fontsize=16, fontname=\"Arial\")\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Starting Salary\", fontsize=12)\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n# Show plot\nplt.show()\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load dataset (correct path syntax)\ndata = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\n\n# Drop missing values\npdf = data[[\"NAICS2_NAME\", \"SALARY_FROM\"]].dropna()\n\n# Group by industry and calculate average salary\navg_salary = pdf.groupby(\"NAICS2_NAME\", as_index=False)[\"SALARY_FROM\"].mean()\n\n# Sort industries by average salary (optional)\navg_salary = avg_salary.sort_values(by=\"SALARY_FROM\", ascending=False)\n\n# Plot\nplt.figure(figsize=(12, 6))\nsns.barplot(data=avg_salary, x=\"NAICS2_NAME\", y=\"SALARY_FROM\", color=\"#636EFA\")\n\n# Customize\nplt.title(\"Average Starting Salary by Industry\", fontsize=16, fontname=\"Arial\")\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Average Starting Salary\", fontsize=12)\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\n\n# Show plot\nplt.show()\n\n# Remote Vs On-site Job Posting\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Step 1: Load the dataset (update path as needed)\ndf = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\n\n# Step 2: Select and clean the relevant column\npdf = df[[\"REMOTE_TYPE_NAME\"]].dropna()\n\n# Step 3: Count occurrences of each remote type\nremote_type_counts = pdf[\"REMOTE_TYPE_NAME\"].value_counts().reset_index()\nremote_type_counts.columns = [\"REMOTE_TYPE_NAME\", \"Job Count\"]\n\n# Step 4: Create pie chart using matplotlib\nplt.figure(figsize=(8, 8))\nplt.pie(\n    remote_type_counts[\"Job Count\"],\n    labels=remote_type_counts[\"REMOTE_TYPE_NAME\"],\n    autopct='%1.1f%%',\n    startangle=140,\n    colors=plt.cm.Set2.colors  # Optional color palette\n)\n\n# Step 5: Add title and format\nplt.title(\"Remote vs On-Site Job Postings\", fontsize=16, fontname=\"Arial\")\nplt.axis(\"equal\")  # Ensures the pie chart is circular\n\n# Step 6: Show plot\nplt.show()\n\ndf.columns\n\ncolumn_list = df.columns.tolist()\nprint(column_list)\n\n\n# Bar Plot – Average Salary: AI vs. Non-AI Career\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\n\n# Filter AI-related jobs\ndf['IS_AI_JOB'] = df['TITLE_NAME'].str.contains(\"AI|Artificial Intelligence|Machine Learning|Data Scientist\", case=False, na=False)\n\n# Group by AI vs. Non-AI and calculate average salary\nsalary_compare = df[df[\"SALARY_FROM\"].notna()].groupby(\"IS_AI_JOB\")[\"SALARY_FROM\"].mean().reset_index()\nsalary_compare[\"Category\"] = salary_compare[\"IS_AI_JOB\"].map({True: \"AI Careers\", False: \"Non-AI Careers\"})\n\n# Plot\nplt.figure(figsize=(8, 6))\nbarplot = sns.barplot(data=salary_compare, x=\"Category\", y=\"SALARY_FROM\", palette=[\"#cdb4db\", \"#fcbf49\"])\n\n# Add numbers on top of bars\nfor i, row in salary_compare.iterrows():\n    barplot.text(\n        i, \n        row[\"SALARY_FROM\"] + 1000,  # Slightly above the bar\n        f\"${row['SALARY_FROM']:.0f}\", \n        ha='center', \n        va='bottom', \n        fontsize=12, \n        fontweight='bold'\n    )\n\n# Customize plot\nplt.title(\"Average Salary: AI vs. Non-AI Careers\", fontsize=16)\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"\")\nplt.tight_layout()\nplt.show()\n\n# Bar Plot – Top Regions by AI Salary\n\n# Filter AI jobs and drop missing salary/state\nai_jobs = df[df[\"IS_AI_JOB\"] & df[\"SALARY_FROM\"].notna() & df[\"STATE_NAME\"].notna()]\n\n# Group and get top 10 states by average salary\ntop_states = ai_jobs.groupby(\"STATE_NAME\")[\"SALARY_FROM\"].mean().sort_values(ascending=False).head(10).reset_index()\n\n# Plot\nsns.barplot(data=top_states, x=\"SALARY_FROM\", y=\"STATE_NAME\", palette=\"viridis\")\nplt.title(\"Top 10 States by Average AI Job Salary\")\nplt.xlabel(\"Average Salary\")\nplt.ylabel(\"State\")\nplt.tight_layout()\nplt.show()\n\n# Box Plot – Salary Distribution by Region (AI vs. Non-AI)\n\ndf_filtered = df[df[\"SALARY_FROM\"].notna() & df[\"STATE_NAME\"].notna()]\ndf_filtered[\"Job Type\"] = df_filtered[\"IS_AI_JOB\"].map({True: \"AI\", False: \"Non-AI\"})\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=df_filtered, x=\"STATE_NAME\", y=\"SALARY_FROM\", hue=\"Job Type\")\nplt.xticks(rotation=45)\nplt.title(\"Salary Distribution by State (AI vs. Non-AI Careers)\")\nplt.tight_layout()\nplt.show()\n\n# Histogram – Salary Range Distribution (AI vs. Non-AI)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df_filtered, x=\"SALARY_FROM\", hue=\"Job Type\", bins=30, kde=True, element=\"step\")\nplt.title(\"Salary Distribution: AI vs. Non-AI Careers\")\nplt.xlabel(\"Starting Salary\")\nplt.tight_layout()\nplt.show()\n\n#  Pie Chart – Proportion of AI vs. Non-AI Jobs in Dataset\n\njob_counts = df[\"IS_AI_JOB\"].value_counts().reset_index()\njob_counts.columns = [\"IS_AI_JOB\", \"Count\"]\njob_counts[\"Category\"] = job_counts[\"IS_AI_JOB\"].map({True: \"AI Careers\", False: \"Non-AI Careers\"})\n\nplt.pie(job_counts[\"Count\"], labels=job_counts[\"Category\"], autopct='%1.1f%%', startangle=140, colors=plt.cm.Set2.colors)\nplt.axis(\"equal\")\nplt.title(\"AI vs. Non-AI Job Proportion\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL', 'ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS', 'MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD', 'SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS', 'LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n\n\nC:\\Users\\pooja\\AppData\\Local\\Temp\\ipykernel_25436\\2946610570.py:110: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\nC:\\Users\\pooja\\AppData\\Local\\Temp\\ipykernel_25436\\2946610570.py:140: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\nC:\\Users\\pooja\\AppData\\Local\\Temp\\ipykernel_25436\\2946610570.py:150: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ad688-employability-sp25A1-pooja",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "ad688-employability-sp25A1-pooja",
    "section": "Introduction",
    "text": "Introduction\nIn today’s rapidly evolving job market, salary and compensation trends offer critical insights into the shifting value of skills, roles, and industries. The growth of artificial intelligence (AI) has created new high-demand career paths, prompting comparisons between the earning potential of AI-related and traditional non-AI roles. At the same time, global economic shifts, inflation, technological disruptions, and changing work models—especially remote work—are transforming how, where, and why people are paid. As job seekers, employers, and policymakers navigate this dynamic landscape, understanding where the highest-paying opportunities lie and what industries are driving wage growth becomes essential.\nIn 2024, several trends make this a particularly important area of study. First, the continued integration of AI across sectors has widened the salary gap between tech-enabled and conventional jobs. Second, remote work has become more mainstream, raising questions about how location influences pay. Finally, macroeconomic factors like post-pandemic recovery, digital transformation, and climate-conscious business practices have pushed wage growth in some industries more than others. By analyzing these factors, this study seeks to uncover how salaries differ between AI and non-AI careers, identify top-paying regions, compare remote vs. in-office compensation, and highlight industries with the most significant wage increases in 2024."
  },
  {
    "objectID": "index.html#research-rationale",
    "href": "index.html#research-rationale",
    "title": "ad688-employability-sp25A1-pooja",
    "section": "Research Rationale",
    "text": "Research Rationale\nThis topic is of high relevance due to the growing disparity in income levels between emerging tech roles and traditional careers. As organizations increasingly invest in AI-driven solutions, professionals with specialized skills in AI and data science are commanding significantly higher salaries, which may influence the career choices of new graduates and mid-career professionals alike. Understanding these salary differentials helps educational institutions, employers, and job seekers align their strategies with market demands. Additionally, insights into regional salary variations and the remote work premium (or lack thereof) are valuable for businesses planning talent acquisition and for professionals considering relocation or remote opportunities.\nStudying salary and compensation trends in 2024 also provides a snapshot of the economic and technological forces shaping the labor market. With the rapid pace of innovation, industries such as tech, renewable energy, and healthcare have seen notable wage growth, while others have lagged behind. By analyzing compensation patterns, this research aims to uncover not only where the money is but also what factors are driving wage growth—be it skill scarcity, location independence, or sector-specific expansion. The expected findings will likely reflect a premium on AI expertise, continued regional disparities favoring tech hubs, and a growing acceptance of remote work as a viable, and potentially lucrative, employment model."
  },
  {
    "objectID": "index.html#literature-review",
    "href": "index.html#literature-review",
    "title": "ad688-employability-sp25A1-pooja",
    "section": "Literature Review",
    "text": "Literature Review\nRecent studies indicate a significant salary gap between AI and non-AI roles, with AI professionals—particularly those skilled in machine learning, data science, and NLP—earning higher-than-average wages. According to LinkedIn and Glassdoor data, roles such as AI engineers and data scientists command salaries often 20–40% higher than software developers or IT generalists. Research by the World Economic Forum (2024) confirms that AI roles are among the top-paying across sectors due to their scarcity and high demand. In contrast, traditional roles in administration or customer service have seen slower growth or wage stagnation.\nGeographically, the United States, Western Europe, and parts of Asia (especially Singapore and India’s tech hubs) offer top salaries in AI-related careers. Cities like San Francisco, London, and Bangalore have become salary hotspots due to tech industry concentration. Simultaneously, a growing body of research, including reports by PwC and Deloitte, shows that remote work has begun to close salary gaps between high-cost and low-cost regions, sometimes even offering a premium for hard-to-source skills. Meanwhile, industries such as tech, healthcare, and green energy saw the highest wage growth in 2024, driven by digital transformation, increased health demands, and climate-conscious innovation."
  },
  {
    "objectID": "salary_trend_analysis.html",
    "href": "salary_trend_analysis.html",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n# Load your dataset (update path as needed)\ndf = pd.read_csv(r\"C:\\Users\\pooja\\Desktop\\Repositories\\ad688-employability-sp25A1-pooja\\lightcast_job_postings.csv\")\ndf.head()\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\ndf.columns.tolist()\n\n['ID',\n 'LAST_UPDATED_DATE',\n 'LAST_UPDATED_TIMESTAMP',\n 'DUPLICATES',\n 'POSTED',\n 'EXPIRED',\n 'DURATION',\n 'SOURCE_TYPES',\n 'SOURCES',\n 'URL',\n 'ACTIVE_URLS',\n 'ACTIVE_SOURCES_INFO',\n 'TITLE_RAW',\n 'BODY',\n 'MODELED_EXPIRED',\n 'MODELED_DURATION',\n 'COMPANY',\n 'COMPANY_NAME',\n 'COMPANY_RAW',\n 'COMPANY_IS_STAFFING',\n 'EDUCATION_LEVELS',\n 'EDUCATION_LEVELS_NAME',\n 'MIN_EDULEVELS',\n 'MIN_EDULEVELS_NAME',\n 'MAX_EDULEVELS',\n 'MAX_EDULEVELS_NAME',\n 'EMPLOYMENT_TYPE',\n 'EMPLOYMENT_TYPE_NAME',\n 'MIN_YEARS_EXPERIENCE',\n 'MAX_YEARS_EXPERIENCE',\n 'IS_INTERNSHIP',\n 'SALARY',\n 'REMOTE_TYPE',\n 'REMOTE_TYPE_NAME',\n 'ORIGINAL_PAY_PERIOD',\n 'SALARY_TO',\n 'SALARY_FROM',\n 'LOCATION',\n 'CITY',\n 'CITY_NAME',\n 'COUNTY',\n 'COUNTY_NAME',\n 'MSA',\n 'MSA_NAME',\n 'STATE',\n 'STATE_NAME',\n 'COUNTY_OUTGOING',\n 'COUNTY_NAME_OUTGOING',\n 'COUNTY_INCOMING',\n 'COUNTY_NAME_INCOMING',\n 'MSA_OUTGOING',\n 'MSA_NAME_OUTGOING',\n 'MSA_INCOMING',\n 'MSA_NAME_INCOMING',\n 'NAICS2',\n 'NAICS2_NAME',\n 'NAICS3',\n 'NAICS3_NAME',\n 'NAICS4',\n 'NAICS4_NAME',\n 'NAICS5',\n 'NAICS5_NAME',\n 'NAICS6',\n 'NAICS6_NAME',\n 'TITLE',\n 'TITLE_NAME',\n 'TITLE_CLEAN',\n 'SKILLS',\n 'SKILLS_NAME',\n 'SPECIALIZED_SKILLS',\n 'SPECIALIZED_SKILLS_NAME',\n 'CERTIFICATIONS',\n 'CERTIFICATIONS_NAME',\n 'COMMON_SKILLS',\n 'COMMON_SKILLS_NAME',\n 'SOFTWARE_SKILLS',\n 'SOFTWARE_SKILLS_NAME',\n 'ONET',\n 'ONET_NAME',\n 'ONET_2019',\n 'ONET_2019_NAME',\n 'CIP6',\n 'CIP6_NAME',\n 'CIP4',\n 'CIP4_NAME',\n 'CIP2',\n 'CIP2_NAME',\n 'SOC_2021_2',\n 'SOC_2021_2_NAME',\n 'SOC_2021_3',\n 'SOC_2021_3_NAME',\n 'SOC_2021_4',\n 'SOC_2021_4_NAME',\n 'SOC_2021_5',\n 'SOC_2021_5_NAME',\n 'LOT_CAREER_AREA',\n 'LOT_CAREER_AREA_NAME',\n 'LOT_OCCUPATION',\n 'LOT_OCCUPATION_NAME',\n 'LOT_SPECIALIZED_OCCUPATION',\n 'LOT_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_OCCUPATION_GROUP',\n 'LOT_OCCUPATION_GROUP_NAME',\n 'LOT_V6_SPECIALIZED_OCCUPATION',\n 'LOT_V6_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION',\n 'LOT_V6_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION_GROUP',\n 'LOT_V6_OCCUPATION_GROUP_NAME',\n 'LOT_V6_CAREER_AREA',\n 'LOT_V6_CAREER_AREA_NAME',\n 'SOC_2',\n 'SOC_2_NAME',\n 'SOC_3',\n 'SOC_3_NAME',\n 'SOC_4',\n 'SOC_4_NAME',\n 'SOC_5',\n 'SOC_5_NAME',\n 'LIGHTCAST_SECTORS',\n 'LIGHTCAST_SECTORS_NAME',\n 'NAICS_2022_2',\n 'NAICS_2022_2_NAME',\n 'NAICS_2022_3',\n 'NAICS_2022_3_NAME',\n 'NAICS_2022_4',\n 'NAICS_2022_4_NAME',\n 'NAICS_2022_5',\n 'NAICS_2022_5_NAME',\n 'NAICS_2022_6',\n 'NAICS_2022_6_NAME']\nprint(df.shape)\n\n(72476, 131)\nprint(df.head())\n\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01       NaN   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers         4413   \n1           Administrative and Support Services         5613   \n2     Insurance Carriers and Related Activities         5242   \n3  Credit Intermediation and Related Activities         5221   \n4                         Unclassified Industry         9999   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers         44133   \n1                                Employment Services         56132   \n2  Agencies, Brokerages, and Other Insurance Rela...         52429   \n3                   Depository Credit Intermediation         52211   \n4                              Unclassified Industry         99999   \n\n                            NAICS_2022_5_NAME NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers       441330   \n1                     Temporary Help Services       561320   \n2          Other Insurance Related Activities       524291   \n3                          Commercial Banking       522110   \n4                       Unclassified Industry       999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 131 columns]\nprint(df.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\nNone\ndf.isnull().sum().to_frame()\n\n\n\n\n\n\n\n\n0\n\n\n\n\nID\n0\n\n\nLAST_UPDATED_DATE\n0\n\n\nLAST_UPDATED_TIMESTAMP\n0\n\n\nDUPLICATES\n0\n\n\nPOSTED\n0\n\n\n...\n...\n\n\nNAICS_2022_4_NAME\n0\n\n\nNAICS_2022_5\n0\n\n\nNAICS_2022_5_NAME\n0\n\n\nNAICS_2022_6\n0\n\n\nNAICS_2022_6_NAME\n0\n\n\n\n\n131 rows × 1 columns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(16,6))\nsns.heatmap(df.isnull(), cbar=False)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\nmissing_counts = df.isnull().sum().sort_values(ascending=False)\nprint(missing_counts[missing_counts &gt; 0])\n\nACTIVE_SOURCES_INFO       64654\nMAX_YEARS_EXPERIENCE      64046\nMAX_EDULEVELS_NAME        56155\nMAX_EDULEVELS             56155\nLIGHTCAST_SECTORS         54682\nLIGHTCAST_SECTORS_NAME    54682\nSALARY                    41658\nSALARY_FROM               40068\nSALARY_TO                 40068\nORIGINAL_PAY_PERIOD       40068\nDURATION                  27294\nMIN_YEARS_EXPERIENCE      23113\nMODELED_DURATION          19261\nMODELED_EXPIRED           15383\nEXPIRED                    7822\nMSA_INCOMING               3921\nMSA_NAME_INCOMING          3921\nMSA_NAME                   3908\nMSA                        3908\nMSA_NAME_OUTGOING          3908\nMSA_OUTGOING               3908\nCOMPANY_RAW                 497\nTITLE_CLEAN                  96\nTITLE_RAW                    60\ndtype: int64\nthresh = 0.7 * len(df)\ndf = df.loc[:, df.isnull().sum() &lt; thresh]\nthreshold = 0.7 * len(df)\ndf = df.loc[:, df.isnull().sum() &lt; threshold]\ndf['SALARY'] = df['SALARY'].fillna(df['SALARY'].median())\ndf['MIN_YEARS_EXPERIENCE'] = df['MIN_YEARS_EXPERIENCE'].fillna(df['MIN_YEARS_EXPERIENCE'].median())\ndf['DURATION'] = df['DURATION'].fillna(df['DURATION'].median())\ndf['COMPANY_RAW'] = df['COMPANY_RAW'].fillna('Unknown')\ndf['TITLE_CLEAN'] = df['TITLE_CLEAN'].fillna('Unknown')\ndf['TITLE_RAW'] = df['TITLE_RAW'].fillna('Unknown')\ndf = df.dropna(subset=['SALARY', 'TITLE_CLEAN'])  # Only if these are critical for your analysis\nprint(df.isnull().sum()[df.isnull().sum() &gt; 0])\n\nEXPIRED                 7822\nMODELED_EXPIRED        15383\nMODELED_DURATION       19261\nORIGINAL_PAY_PERIOD    40068\nSALARY_TO              40068\nSALARY_FROM            40068\nMSA                     3908\nMSA_NAME                3908\nMSA_OUTGOING            3908\nMSA_NAME_OUTGOING       3908\nMSA_INCOMING            3921\nMSA_NAME_INCOMING       3921\ndtype: int64\ndf['SALARY_TO'] = df['SALARY_TO'].fillna(df['SALARY_TO'].median())\ndf['SALARY_FROM'] = df['SALARY_FROM'].fillna(df['SALARY_FROM'].median())\ndf['ORIGINAL_PAY_PERIOD'] = df['ORIGINAL_PAY_PERIOD'].fillna('Unknown')\ndf['EXPIRED'] = df['EXPIRED'].fillna('Unknown')\ndf['MODELED_EXPIRED'] = df['MODELED_EXPIRED'].fillna('Unknown')\ndf['MSA'] = df['MSA'].fillna('Unknown')\ndf['MSA_NAME'] = df['MSA_NAME'].fillna('Unknown')\ndf['MSA_OUTGOING'] = df['MSA_OUTGOING'].fillna('Unknown')\ndf['MSA_NAME_OUTGOING'] = df['MSA_NAME_OUTGOING'].fillna('Unknown')\ndf['MSA_INCOMING'] = df['MSA_INCOMING'].fillna('Unknown')\ndf['MSA_NAME_INCOMING'] = df['MSA_NAME_INCOMING'].fillna('Unknown')\ndf['MODELED_DURATION'] = df['MODELED_DURATION'].fillna(df['MODELED_DURATION'].median())\nprint(df.isnull().sum()[df.isnull().sum() &gt; 0])\n\nSeries([], dtype: int64)\nprint(df.shape)\nprint(df.columns)\nprint(df.dtypes)\nprint(df.head())\n\n(72476, 125)\nIndex(['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES',\n       'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL',\n       ...\n       'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME',\n       'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6',\n       'NAICS_2022_6_NAME'],\n      dtype='object', length=125)\nID                        object\nLAST_UPDATED_DATE         object\nLAST_UPDATED_TIMESTAMP    object\nDUPLICATES                 int64\nPOSTED                    object\n                           ...  \nNAICS_2022_4_NAME         object\nNAICS_2022_5               int64\nNAICS_2022_5_NAME         object\nNAICS_2022_6               int64\nNAICS_2022_6_NAME         object\nLength: 125, dtype: object\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01      18.0   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME  NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers          4413   \n1           Administrative and Support Services          5613   \n2     Insurance Carriers and Related Activities          5242   \n3  Credit Intermediation and Related Activities          5221   \n4                         Unclassified Industry          9999   \n\n                                   NAICS_2022_4_NAME NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers        44133   \n1                                Employment Services        56132   \n2  Agencies, Brokerages, and Other Insurance Rela...        52429   \n3                   Depository Credit Intermediation        52211   \n4                              Unclassified Industry        99999   \n\n                            NAICS_2022_5_NAME  NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers        441330   \n1                     Temporary Help Services        561320   \n2          Other Insurance Related Activities        524291   \n3                          Commercial Banking        522110   \n4                       Unclassified Industry        999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 125 columns]\nprint(df.describe(include='all'))\n\n                                              ID LAST_UPDATED_DATE  \\\ncount                                      72476             72476   \nunique                                     72476               169   \ntop     733c12969489de888093ef22d09204dc0945148a        2024-10-09   \nfreq                                           1             22304   \nmean                                         NaN               NaN   \nstd                                          NaN               NaN   \nmin                                          NaN               NaN   \n25%                                          NaN               NaN   \n50%                                          NaN               NaN   \n75%                                          NaN               NaN   \nmax                                          NaN               NaN   \n\n           LAST_UPDATED_TIMESTAMP    DUPLICATES      POSTED  EXPIRED  \\\ncount                       72476  72476.000000       72476    72476   \nunique                        174           NaN         153      178   \ntop     2024-10-09 18:07:44.758 Z           NaN  2024-05-24  Unknown   \nfreq                        19878           NaN        1050     7822   \nmean                          NaN      1.081627         NaN      NaN   \nstd                           NaN      2.807512         NaN      NaN   \nmin                           NaN      0.000000         NaN      NaN   \n25%                           NaN      0.000000         NaN      NaN   \n50%                           NaN      0.000000         NaN      NaN   \n75%                           NaN      1.000000         NaN      NaN   \nmax                           NaN    100.000000         NaN      NaN   \n\n            DURATION         SOURCE_TYPES             SOURCES  \\\ncount   72476.000000                72476               72476   \nunique           NaN                  175               12890   \ntop              NaN  [\\n  \"Job Board\"\\n]  [\\n  \"dice.com\"\\n]   \nfreq             NaN                45182               10596   \nmean       20.694796                  NaN                 NaN   \nstd        11.529174                  NaN                 NaN   \nmin         0.000000                  NaN                 NaN   \n25%        15.000000                  NaN                 NaN   \n50%        18.000000                  NaN                 NaN   \n75%        23.000000                  NaN                 NaN   \nmax        59.000000                  NaN                 NaN   \n\n                                                      URL  ...  NAICS_2022_2  \\\ncount                                               72476  ...  72476.000000   \nunique                                              72345  ...           NaN   \ntop     [\\n  \"https://www2.jobdiva.com/portal/?a=u4jdn...  ...           NaN   \nfreq                                                   29  ...           NaN   \nmean                                                  NaN  ...     58.352448   \nstd                                                   NaN  ...     18.628253   \nmin                                                   NaN  ...     11.000000   \n25%                                                   NaN  ...     52.000000   \n50%                                                   NaN  ...     54.000000   \n75%                                                   NaN  ...     56.000000   \nmax                                                   NaN  ...     99.000000   \n\n                                       NAICS_2022_2_NAME  NAICS_2022_3  \\\ncount                                              72476  72476.000000   \nunique                                                21           NaN   \ntop     Professional, Scientific, and Technical Services           NaN   \nfreq                                               23318           NaN   \nmean                                                 NaN    587.864245   \nstd                                                  NaN    186.277378   \nmin                                                  NaN    111.000000   \n25%                                                  NaN    522.000000   \n50%                                                  NaN    541.000000   \n75%                                                  NaN    561.000000   \nmax                                                  NaN    999.000000   \n\n                                       NAICS_2022_3_NAME  NAICS_2022_4  \\\ncount                                              72476  72476.000000   \nunique                                                97           NaN   \ntop     Professional, Scientific, and Technical Services           NaN   \nfreq                                               23318           NaN   \nmean                                                 NaN   5883.118674   \nstd                                                  NaN   1864.277209   \nmin                                                  NaN   1111.000000   \n25%                                                  NaN   5223.000000   \n50%                                                  NaN   5415.000000   \n75%                                                  NaN   5614.000000   \nmax                                                  NaN   9999.000000   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\ncount                                          72476  72476.000000   \nunique                                           294           NaN   \ntop     Computer Systems Design and Related Services           NaN   \nfreq                                           10862           NaN   \nmean                                             NaN  58834.284053   \nstd                                              NaN  18644.805144   \nmin                                              NaN  11115.000000   \n25%                                              NaN  52231.750000   \n50%                                              NaN  54151.000000   \n75%                                              NaN  56149.000000   \nmax                                              NaN  99999.000000   \n\n                                   NAICS_2022_5_NAME   NAICS_2022_6  \\\ncount                                          72476   72476.000000   \nunique                                           600            NaN   \ntop     Computer Systems Design and Related Services            NaN   \nfreq                                           10862            NaN   \nmean                                             NaN  588345.353165   \nstd                                              NaN  186450.077502   \nmin                                              NaN  111150.000000   \n25%                                              NaN  522317.500000   \n50%                                              NaN  541519.000000   \n75%                                              NaN  561499.000000   \nmax                                              NaN  999999.000000   \n\n            NAICS_2022_6_NAME  \ncount                   72476  \nunique                    814  \ntop     Unclassified Industry  \nfreq                     9493  \nmean                      NaN  \nstd                       NaN  \nmin                       NaN  \n25%                       NaN  \n50%                       NaN  \n75%                       NaN  \nmax                       NaN  \n\n[11 rows x 125 columns]\nimport matplotlib.pyplot as plt\ndf['SALARY_FROM'].hist(bins=50)\nplt.title('Distribution of Minimum Salaries')\nplt.xlabel('SALARY_FROM')\nplt.ylabel('Count')\nplt.show()\nprint(df['STATE_NAME'].value_counts())\nprint(df['EMPLOYMENT_TYPE_NAME'].value_counts())\n\nSTATE_NAME\nTexas                                      8067\nCalifornia                                 7087\nFlorida                                    3645\nVirginia                                   3636\nIllinois                                   3539\nNew York                                   3341\nNorth Carolina                             2747\nGeorgia                                    2658\nOhio                                       2627\nNew Jersey                                 2614\nPennsylvania                               2254\nMassachusetts                              2057\nMichigan                                   1838\nArizona                                    1638\nWashington                                 1626\nMinnesota                                  1476\nColorado                                   1455\nMaryland                                   1360\nTennessee                                  1274\nMissouri                                   1232\nWashington, D.C. (District of Columbia)    1224\nOregon                                     1090\nWisconsin                                  1050\nIndiana                                     956\nConnecticut                                 863\nKansas                                      740\nAlabama                                     690\nSouth Carolina                              647\nUtah                                        643\nKentucky                                    635\nIowa                                        625\nOklahoma                                    606\nNevada                                      591\nArkansas                                    584\nNebraska                                    540\nIdaho                                       478\nMississippi                                 471\nRhode Island                                459\nLouisiana                                   456\nDelaware                                    438\nMaine                                       345\nNew Hampshire                               296\nSouth Dakota                                295\nHawaii                                      263\nNew Mexico                                  255\nAlaska                                      236\nVermont                                     227\nMontana                                     186\nWest Virginia                               159\nNorth Dakota                                149\nWyoming                                     108\nName: count, dtype: int64\nEMPLOYMENT_TYPE_NAME\nFull-time (&gt; 32 hours)    69196\nPart-time (≤ 32 hours)     2298\nPart-time / full-time       982\nName: count, dtype: int64\nprint(df.groupby('STATE_NAME')['SALARY_FROM'].mean())\nprint(df.groupby('EMPLOYMENT_TYPE_NAME')['SALARY_FROM'].mean())\n\nSTATE_NAME\nAlabama                                    88279.007246\nAlaska                                     84794.105932\nArizona                                    87683.371184\nArkansas                                   89840.611301\nCalifornia                                 95423.065613\nColorado                                   90154.406873\nConnecticut                                92808.732329\nDelaware                                   90662.648402\nFlorida                                    89149.689712\nGeorgia                                    90026.200903\nHawaii                                     90106.038023\nIdaho                                      89572.702929\nIllinois                                   91415.218988\nIndiana                                    88694.947699\nIowa                                       89180.659200\nKansas                                     87888.768919\nKentucky                                   86203.930709\nLouisiana                                  88461.322368\nMaine                                      87973.060870\nMaryland                                   90777.826471\nMassachusetts                              90503.149733\nMichigan                                   90050.809576\nMinnesota                                  90077.165312\nMississippi                                88169.420382\nMissouri                                   88634.789773\nMontana                                    92105.451613\nNebraska                                   89942.440741\nNevada                                     85886.473773\nNew Hampshire                              87656.047297\nNew Jersey                                 93554.228386\nNew Mexico                                 82922.105882\nNew York                                   92826.572882\nNorth Carolina                             90884.643975\nNorth Dakota                               85462.389262\nOhio                                       87940.357442\nOklahoma                                   88058.201320\nOregon                                     90852.360550\nPennsylvania                               89500.943212\nRhode Island                               89953.023965\nSouth Carolina                             89081.479134\nSouth Dakota                               85602.905085\nTennessee                                  87728.423862\nTexas                                      89990.226602\nUtah                                       87489.544323\nVermont                                    93845.889868\nVirginia                                   92390.495325\nWashington                                 94471.674662\nWashington, D.C. (District of Columbia)    92732.987745\nWest Virginia                              85515.301887\nWisconsin                                  88277.826667\nWyoming                                    88958.398148\nName: SALARY_FROM, dtype: float64\nEMPLOYMENT_TYPE_NAME\nFull-time (&gt; 32 hours)    91112.257659\nPart-time (≤ 32 hours)    80780.870757\nPart-time / full-time     83786.090631\nName: SALARY_FROM, dtype: float64\ndf.columns.tolist()\n\n['ID',\n 'LAST_UPDATED_DATE',\n 'LAST_UPDATED_TIMESTAMP',\n 'DUPLICATES',\n 'POSTED',\n 'EXPIRED',\n 'DURATION',\n 'SOURCE_TYPES',\n 'SOURCES',\n 'URL',\n 'ACTIVE_URLS',\n 'TITLE_RAW',\n 'BODY',\n 'MODELED_EXPIRED',\n 'MODELED_DURATION',\n 'COMPANY',\n 'COMPANY_NAME',\n 'COMPANY_RAW',\n 'COMPANY_IS_STAFFING',\n 'EDUCATION_LEVELS',\n 'EDUCATION_LEVELS_NAME',\n 'MIN_EDULEVELS',\n 'MIN_EDULEVELS_NAME',\n 'EMPLOYMENT_TYPE',\n 'EMPLOYMENT_TYPE_NAME',\n 'MIN_YEARS_EXPERIENCE',\n 'IS_INTERNSHIP',\n 'SALARY',\n 'REMOTE_TYPE',\n 'REMOTE_TYPE_NAME',\n 'ORIGINAL_PAY_PERIOD',\n 'SALARY_TO',\n 'SALARY_FROM',\n 'LOCATION',\n 'CITY',\n 'CITY_NAME',\n 'COUNTY',\n 'COUNTY_NAME',\n 'MSA',\n 'MSA_NAME',\n 'STATE',\n 'STATE_NAME',\n 'COUNTY_OUTGOING',\n 'COUNTY_NAME_OUTGOING',\n 'COUNTY_INCOMING',\n 'COUNTY_NAME_INCOMING',\n 'MSA_OUTGOING',\n 'MSA_NAME_OUTGOING',\n 'MSA_INCOMING',\n 'MSA_NAME_INCOMING',\n 'NAICS2',\n 'NAICS2_NAME',\n 'NAICS3',\n 'NAICS3_NAME',\n 'NAICS4',\n 'NAICS4_NAME',\n 'NAICS5',\n 'NAICS5_NAME',\n 'NAICS6',\n 'NAICS6_NAME',\n 'TITLE',\n 'TITLE_NAME',\n 'TITLE_CLEAN',\n 'SKILLS',\n 'SKILLS_NAME',\n 'SPECIALIZED_SKILLS',\n 'SPECIALIZED_SKILLS_NAME',\n 'CERTIFICATIONS',\n 'CERTIFICATIONS_NAME',\n 'COMMON_SKILLS',\n 'COMMON_SKILLS_NAME',\n 'SOFTWARE_SKILLS',\n 'SOFTWARE_SKILLS_NAME',\n 'ONET',\n 'ONET_NAME',\n 'ONET_2019',\n 'ONET_2019_NAME',\n 'CIP6',\n 'CIP6_NAME',\n 'CIP4',\n 'CIP4_NAME',\n 'CIP2',\n 'CIP2_NAME',\n 'SOC_2021_2',\n 'SOC_2021_2_NAME',\n 'SOC_2021_3',\n 'SOC_2021_3_NAME',\n 'SOC_2021_4',\n 'SOC_2021_4_NAME',\n 'SOC_2021_5',\n 'SOC_2021_5_NAME',\n 'LOT_CAREER_AREA',\n 'LOT_CAREER_AREA_NAME',\n 'LOT_OCCUPATION',\n 'LOT_OCCUPATION_NAME',\n 'LOT_SPECIALIZED_OCCUPATION',\n 'LOT_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_OCCUPATION_GROUP',\n 'LOT_OCCUPATION_GROUP_NAME',\n 'LOT_V6_SPECIALIZED_OCCUPATION',\n 'LOT_V6_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION',\n 'LOT_V6_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION_GROUP',\n 'LOT_V6_OCCUPATION_GROUP_NAME',\n 'LOT_V6_CAREER_AREA',\n 'LOT_V6_CAREER_AREA_NAME',\n 'SOC_2',\n 'SOC_2_NAME',\n 'SOC_3',\n 'SOC_3_NAME',\n 'SOC_4',\n 'SOC_4_NAME',\n 'SOC_5',\n 'SOC_5_NAME',\n 'NAICS_2022_2',\n 'NAICS_2022_2_NAME',\n 'NAICS_2022_3',\n 'NAICS_2022_3_NAME',\n 'NAICS_2022_4',\n 'NAICS_2022_4_NAME',\n 'NAICS_2022_5',\n 'NAICS_2022_5_NAME',\n 'NAICS_2022_6',\n 'NAICS_2022_6_NAME']\ndf.shape\n\n(72476, 125)"
  },
  {
    "objectID": "salary_trend_analysis.html#proportion-of-remote-jobs-in-ai-vs.-non-ai",
    "href": "salary_trend_analysis.html#proportion-of-remote-jobs-in-ai-vs.-non-ai",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Proportion of Remote Jobs in AI vs. Non-AI",
    "text": "Proportion of Remote Jobs in AI vs. Non-AI\n\nimport plotly.express as px\n\n# Group by AI status and remote type\nremote_counts = df.groupby(['IS_AI_CAREER', 'REMOTE_TYPE_NAME']).size().reset_index(name='count')\n\n# Create interactive grouped bar chart\nfig = px.bar(\n    remote_counts,\n    x='IS_AI_CAREER',\n    y='count',\n    color='REMOTE_TYPE_NAME',\n    barmode='group',\n    title='Remote/In-Office Proportion: AI vs. Non-AI Jobs',\n    labels={\n        'IS_AI_CAREER': 'AI Career (1 = Yes, 0 = No)',\n        'count': 'Job Count',\n        'REMOTE_TYPE_NAME': 'Remote Type'\n    },\n    height=500,\n    width=800\n)\n\nfig.update_layout(xaxis=dict(tickmode='array', tickvals=[0, 1], ticktext=['Non-AI', 'AI']))\nfig.show()\n\n                            \n                                            \n\n\n\nNon-AI jobs dominate across all remote types, with the “[None]” category being the most frequent, possibly due to missing data. Among labeled roles, remote work is more common than hybrid or non-remote. AI jobs are fewer overall, but show some presence in remote and “[None]” categories, indicating limited but growing remote flexibility in AI roles. The chart highlights stronger remote trends in Non-AI jobs and underrepresentation in AI postings??\n\n\nCorrelation Matrix\n\n# Select numeric columns only\ndf_numeric = df.select_dtypes(include=[np.number])\n\n\ncorrelation_matrix = df_numeric.corr()\n\n\nimport plotly.express as px\n\nfig = px.imshow(\n    correlation_matrix,\n    text_auto=True,\n    color_continuous_scale='RdBu_r',\n    title='Correlation Matrix (Numeric Features)'\n)\n\nfig.update_layout(height=700, width=800)\nfig.show()\n\n                            \n                                            \n\n\n\nThe heatmap reveals several strong correlations among job-related attributes. Notably, LOT_V6_SPECIALIZED_OCCUPATION, LOT_SPECIALIZED_OCCUPATION, and LOT_CAREER_AREA are highly correlated, suggesting overlapping or hierarchical occupational classifications. Similarly, NAICS_2022_2, NAICS_2022_4, and NAICS_2022_6 show strong mutual correlations, reflecting nested industry groupings within the NAICS coding system. Additionally, SALARY_FROM shows a moderate positive correlation with MIN_YEARS_EXPERIENCE, indicating that jobs requiring more experience tend to offer higher starting salaries. REMOTE_TYPE shows weak correlation with most features, suggesting limited direct influence on other variables. Overall, the plot highlights variable clusters driven by structured job classifications and experience-related salary trends??\n\n\n\nTop 10 AI Job Titles by Average Salary\n\nimport plotly.express as px\n\n# Prepare data: top 10 AI job titles by average salary\nai_jobs = (\n    df[df['IS_AI_CAREER'] == 1]\n    .groupby('TITLE_CLEAN')['SALARY']\n    .mean()\n    .sort_values(ascending=False)\n    .head(10)\n    .reset_index()\n)\n\n# Create bar plot\nfig = px.bar(\n    ai_jobs,\n    x='TITLE_CLEAN',\n    y='SALARY',\n    title='Top 10 AI Job Titles by Average Salary',\n    labels={'TITLE_CLEAN': 'Job Title', 'SALARY': 'Average Salary'},\n    height=500\n)\n\nfig.update_layout(\n    xaxis_tickangle=45\n)\n\nfig.show()\n\n                            \n                                            \n\n\n\nThe top-paying AI job titles offer salaries well above the $200k mark, with the highest being “hematology oncology with Kaiser Permanente county ca,” exceeding $400k. Other roles such as “ai portfolio ecosystem strategist” and “VP data analytics and AI” also rank among the highest, reflecting the premium placed on strategic and executive AI leadership roles. Technical positions like “data engineering leader”, “senior domain architect”, and “AI training with PyTorch” follow closely, indicating that both leadership and advanced technical expertise are highly valued in the AI job market. This highlights the strong salary potential for professionals in AI, especially those combining domain knowledge, leadership, and technical skills??\n\n\n\n5. Industry-wise Salary Trends (2024)\n\nimport plotly.express as px\n\n# Filter and aggregate industry salary data for 2024\nindustry_salary_2024 = (\n    df[df['POSTED'].astype(str).str.contains('2024')]\n    .groupby('NAICS2_NAME')['SALARY']\n    .mean()\n    .sort_values(ascending=False)\n    .head(15)\n    .reset_index()\n)\n\n# Create Plotly bar chart\nfig = px.bar(\n    industry_salary_2024,\n    x='NAICS2_NAME',\n    y='SALARY',\n    title='Average Salary by Industry (2024)',\n    labels={'NAICS2_NAME': 'Industry', 'SALARY': 'Average Salary'},\n    height=600,\n    color_discrete_sequence=['mediumseagreen']\n)\n\n# Improve layout\nfig.update_layout(\n    xaxis_tickangle=45,\n    template='plotly_white'\n)\n\nfig.show()\n\n                            \n                                            \n\n\n\nThe chart shows that the Information industry offers the highest average salary in 2024, leading all other sectors. It is closely followed by Accommodation and Food Services, and Professional, Scientific, and Technical Services, all maintaining average salaries well above $100k. While all industries presented maintain relatively high average salaries, the lower-paying sectors include Administrative and Support, Waste Management and Remediation Services, and Agriculture, Forestry, Fishing, and Hunting. Despite the differences, the salary distribution across industries is relatively narrow, suggesting that while industry matters, most sectors maintain competitive compensation levels above $100k in this dataset.\n\n\n\n7. AI vs. Non-AI Job Count by Region\n\nimport plotly.express as px\n\n# Step 1: Prepare grouped job count data (already done)\nregion_counts = df.groupby(['STATE_NAME', 'IS_AI_CAREER']).size().reset_index(name='count')\nregion_counts['Career Type'] = region_counts['IS_AI_CAREER'].map({0: 'Non-AI', 1: 'AI'})\n\n# Step 2: Create grouped bar chart with Plotly\nfig = px.bar(\n    region_counts,\n    x='STATE_NAME',\n    y='count',\n    color='Career Type',\n    barmode='group',\n    title='Job Counts: AI vs. Non-AI by State',\n    labels={'STATE_NAME': 'State', 'count': 'Job Count'},\n    height=600,\n    width=1000,\n    color_discrete_map={'AI': 'tomato', 'Non-AI': 'steelblue'}\n)\n\n# Step 3: Format the layout\nfig.update_layout(\n    xaxis_tickangle=60,\n    template='plotly_white'\n)\n\nfig.show()\n\n                            \n                                            \n\n\n\nCalifornia and Texas clearly lead in overall job counts, each recording well over 6,000 postings, making them dominant states for employment opportunities. Other states like Florida, New York, and Illinois also show relatively high job counts. In contrast, AI jobs (shown in red) represent only a small fraction of total postings in all states, highlighting their limited but emerging presence across the U.S. While AI roles are most noticeable in high-population and tech-centric states, their count remains consistently low compared to Non-AI jobs. This suggests that although AI careers are expanding, the current U.S. job market is still largely driven by Non-AI roles\n\n\n\nBoxplot: Salary by Remote Type (AI vs. Non-AI)\n\nimport plotly.express as px\n\nfig = px.box(\n    df,\n    x='REMOTE_TYPE_NAME',\n    y='SALARY',\n    color='IS_AI_CAREER',\n    title='Salary Distribution by Remote Type (AI vs. Non-AI Careers)',\n    labels={\n        'REMOTE_TYPE_NAME': 'Remote Type',\n        'SALARY': 'Salary',\n        'IS_AI_CAREER': 'AI Career (1 = AI, 0 = Non-AI)'\n    },\n    height=600,\n    width=1000\n)\n\nfig.update_layout(\n    boxmode='group',  # Grouped by hue (IS_AI_CAREER)\n    xaxis_tickangle=0\n)\n\nfig.show()\n\n                            \n                                            \n\n\n\n\nAverage Salary by State for AI Jobs\n\nimport plotly.express as px\n\n# Prepare data\navg_salary_state = (\n    df[df['IS_AI_CAREER'] == 1]\n    .groupby('STATE_NAME')['SALARY']\n    .mean()\n    .sort_values(ascending=False)\n    .reset_index()\n)\n\n# Create interactive bar chart\nfig = px.bar(\n    avg_salary_state,\n    x='STATE_NAME',\n    y='SALARY',\n    title='Average AI Career Salary by State',\n    labels={'STATE_NAME': 'State', 'SALARY': 'Average Salary'},\n    height=600,\n    width=1000\n)\n\nfig.update_layout(xaxis_tickangle=45)\nfig.show()\n\n                            \n                                            \n\n\n\n\nCount of AI vs. Non-AI Jobs by State (Top 15 States)\n\nimport plotly.express as px\nimport pandas as pd\n\n# Group and prepare data\nai_counts = df.groupby(['STATE_NAME', 'IS_AI_CAREER']).size().unstack(fill_value=0)\n\n# Get top 15 states by total job count\ntop_states = ai_counts.sum(axis=1).sort_values(ascending=False).head(15).index\n\n# Filter and reset for Plotly format\nplot_data = ai_counts.loc[top_states].reset_index().melt(id_vars='STATE_NAME', var_name='IS_AI_CAREER', value_name='Job Count')\n\n# Plotly stacked bar chart\nfig = px.bar(\n    plot_data,\n    x='STATE_NAME',\n    y='Job Count',\n    color='IS_AI_CAREER',\n    title='Job Count: AI vs. Non-AI by State (Top 15 States)',\n    labels={'STATE_NAME': 'State', 'IS_AI_CAREER': 'Career Type'},\n    barmode='stack',\n    height=600,\n    width=1000\n)\n\nfig.update_layout(xaxis_tickangle=45)\nfig.show()\n\n                            \n                                            \n\n\n\nTexas and California lead the nation in total job postings, each surpassing 7,000 listings, making them the top employment hubs among the top 15 states. States like Florida, Virginia, and Illinois follow at a distance with job counts in the 3,000–3,600 range. Across all states, the majority of postings are Non-AI roles (blue), while AI jobs (red) represent a small but visible portion of the market. The consistent presence of AI postings, especially in California, Texas, and New York, reflects their strong technology ecosystems and demand for specialized talent. Overall, while Non-AI roles dominate in volume, AI opportunities are steadily emerging in tech-forward states.\n\n\n\nIndustry-wise AI vs. Non-AI Job Count\n\nimport plotly.express as px\nimport pandas as pd\n\n# Group and prepare data\nindustry_counts = df.groupby(['NAICS2_NAME', 'IS_AI_CAREER']).size().unstack(fill_value=0)\n\n# Get top 10 industries by total job count\ntop_industries = industry_counts.sum(axis=1).sort_values(ascending=False).head(10).index\n\n# Reshape for Plotly\nplot_data = industry_counts.loc[top_industries].reset_index().melt(\n    id_vars='NAICS2_NAME',\n    var_name='IS_AI_CAREER',\n    value_name='Job Count'\n)\n\n# Create stacked bar chart\nfig = px.bar(\n    plot_data,\n    x='NAICS2_NAME',\n    y='Job Count',\n    color='IS_AI_CAREER',\n    barmode='stack',\n    title='AI vs. Non-AI Job Count by Industry (Top 10)',\n    labels={'NAICS2_NAME': 'Industry', 'IS_AI_CAREER': 'Career Type'},\n    height=600,\n    width=1000\n)\n\nfig.update_layout(xaxis_tickangle=45)\nfig.show()\n\n                            \n                                            \n\n\n\nThe Professional, Scientific, and Technical Services industry leads with the highest overall job count, exceeding 22,000 postings, and also shows the largest volume of AI-related roles among all industries. In contrast, other sectors like Finance and Insurance, Manufacturing, and Information display moderate job counts with relatively smaller AI representation. Industries such as Retail Trade, Educational Services, and Health Care and Social Assistance show low overall job volumes and minimal AI presence. This distribution highlights that AI jobs are highly concentrated in knowledge-intensive industries, especially those involving technical, scientific, and data-driven roles, while traditional service sectors remain largely dominated by Non-AI roles.\n\n\n\nAverage Salary by Original Pay Period (AI vs. Non-AI)\n\nimport plotly.express as px\n\nimport plotly.io as pio\n\n# Tell Plotly to use Colab's renderer\npio.renderers.default = 'colab'\n\n# Group and calculate average salary\navg_salary = (\n    df.groupby(['ORIGINAL_PAY_PERIOD', 'IS_AI_CAREER'])['SALARY']\n    .mean()\n    .reset_index()\n)\n\n# Create interactive grouped bar chart\nfig = px.bar(\n    avg_salary,\n    x='ORIGINAL_PAY_PERIOD',\n    y='SALARY',\n    color='IS_AI_CAREER',\n    barmode='group',\n    title='Average Salary by Pay Period (AI vs. Non-AI Careers)',\n    labels={\n        'ORIGINAL_PAY_PERIOD': 'Pay Period',\n        'SALARY': 'Average Salary',\n        'IS_AI_CAREER': 'AI Career (1 = AI, 0 = Non-AI)'\n    },\n    height=500,\n    color_discrete_map={\n        1: '#007acc',  # AI Career - Professional blue\n        0: '#999999'   # Non-AI Career - Neutral gray\n    }\n)\n\nfig.update_layout(\n    xaxis_tickangle=0,\n    template='plotly_white',\n    legend_title='Career Type'\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nAI careers consistently offer higher average salaries than Non-AI roles across all pay periods, as indicated by the yellow segments stacked above the dark blue portions in each bar. The yearly pay period shows the highest average salary overall, suggesting that full-time AI roles provide the most lucrative compensation. Similarly, weekly and monthly pay periods also reflect strong earnings in AI jobs, reinforcing their value in both permanent and contract roles. In contrast, daily and hourly pay periods are dominated by Non-AI roles with significantly lower average salaries, indicating their prevalence in less specialized, often temporary work. This pattern underscores that AI ca\n\n\n\nvisualize the salary trend for AI vs. Non-AI jobs specifically in 2024,\n\ndf['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')  # Ensure correct datetime format\ndf['YEAR'] = df['POSTED'].dt.year\ndf['MONTH'] = df['POSTED'].dt.month\n\n\ndf_2024 = df[df['YEAR'] == 2024]\n\n\ntrend_2024 = df_2024.groupby(['MONTH', 'IS_AI_CAREER'])['SALARY'].mean().reset_index()\n\n\nimport plotly.express as px\n\n# Create the line plot\nfig = px.line(\n    trend_2024,\n    x='MONTH',\n    y='SALARY',\n    color='IS_AI_CAREER',\n    markers=True,\n    title='Monthly Salary Trend in 2024: AI vs. Non-AI Careers',\n    labels={\n        'MONTH': 'Month',\n        'SALARY': 'Average Salary',\n        'IS_AI_CAREER': 'AI Career (1 = AI, 0 = Non-AI)'\n    }\n)\n\n# Customize month ticks\nfig.update_layout(\n    xaxis=dict(\n        tickmode='array',\n        tickvals=list(range(1, 13)),\n        ticktext=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    ),\n    yaxis_title='Average Salary',\n    height=500,\n    width=900\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nAI careers consistently offer higher average salaries than Non-AI roles throughout the observed months in 2024. While both career types experienced a dip in July, AI salaries quickly rebounded in August, peaking at over $120k, compared to Non-AI roles that peaked lower in September at around $118k. The largest gap in pay occurred during August, when AI salaries surged while Non-AI roles rose more gradually. This trend highlights the stronger volatility but higher earning potential in AI careers, whereas Non-AI roles demonstrate a more stable but lower salary trajectory.\n\n\n\nHow do salaries differ across AI vs. non-AI careers\n\nimport plotly.graph_objects as go\n\n# Create violin plots for each group\nfig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x=df['IS_AI_CAREER'][df['IS_AI_CAREER'] == 0].map({0: 'Non-AI'}),\n    y=df['SALARY'][df['IS_AI_CAREER'] == 0],\n    name='Non-AI',\n    box_visible=True,\n    meanline_visible=True\n))\n\nfig.add_trace(go.Violin(\n    x=df['IS_AI_CAREER'][df['IS_AI_CAREER'] == 1].map({1: 'AI'}),\n    y=df['SALARY'][df['IS_AI_CAREER'] == 1],\n    name='AI',\n    box_visible=True,\n    meanline_visible=True\n))\n\n# Update layout\nfig.update_layout(\n    title='Salary Distribution: AI vs. Non-AI Careers',\n    xaxis_title='Career Type',\n    yaxis_title='Salary',\n    height=500,\n    width=700\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Prepare salary mean and median data\nsalary_means = df.groupby('IS_AI_CAREER')['SALARY'].mean().reset_index()\nsalary_means['Metric'] = 'Mean'\n\nsalary_medians = df.groupby('IS_AI_CAREER')['SALARY'].median().reset_index()\nsalary_medians['Metric'] = 'Median'\n\n# Combine for optional side-by-side\nsalary_combined = pd.concat([salary_means, salary_medians])\nsalary_combined['Career Type'] = salary_combined['IS_AI_CAREER'].map({0: 'Non-AI', 1: 'AI'})\n\n# Plot Mean Salary\nfig_mean = px.bar(\n    salary_means,\n    x='IS_AI_CAREER',\n    y='SALARY',\n    color='IS_AI_CAREER',\n    title='Average Salary: AI vs. Non-AI Careers',\n    labels={'IS_AI_CAREER': 'Career Type', 'SALARY': 'Average Salary'},\n    color_discrete_sequence=['skyblue', 'orange'],\n    height=400,\n    width=500\n)\nfig_mean.update_layout(\n    xaxis=dict(\n        tickmode='array',\n        tickvals=[0, 1],\n        ticktext=['Non-AI', 'AI']\n    ),\n    showlegend=False\n)\nfig_mean.show()\n\n# Plot Median Salary\nfig_median = px.bar(\n    salary_medians,\n    x='IS_AI_CAREER',\n    y='SALARY',\n    color='IS_AI_CAREER',\n    title='Median Salary: AI vs. Non-AI Careers',\n    labels={'IS_AI_CAREER': 'Career Type', 'SALARY': 'Median Salary'},\n    color_discrete_sequence=['lightgreen', 'salmon'],\n    height=400,\n    width=500\n)\nfig_median.update_layout(\n    xaxis=dict(\n        tickmode='array',\n        tickvals=[0, 1],\n        ticktext=['Non-AI', 'AI']\n    ),\n    showlegend=False\n)\nfig_median.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\n\n                                \n                                            \n\n\n\n\n\nAI careers offer slightly higher average and median salaries than Non-AI roles, indicating a modest pay advantage. The average salary difference suggests AI roles include more high-paying jobs, while the nearly identical medians show that typical salaries are similar across both sectors. Overall, AI jobs may lead to better earnings at the high end, but base-level pay is fairly consistent.\n\n\n\nWhat regions offer the highest-paying jobs in AI-related and traditional careers?\n\n\n1. Bar Chart: Top 10 States by Average Salary (AI vs. Non-AI)\n\nimport plotly.express as px\n\n# Step 1: Calculate average salary by state and AI flag\navg_salary = df.groupby(['STATE_NAME', 'IS_AI_CAREER'])['SALARY'].mean().reset_index()\n\n# Step 2: Filter top 10 AI states\ntop_states_ai = avg_salary[avg_salary['IS_AI_CAREER'] == 1].sort_values('SALARY', ascending=False).head(10)\n\n# Step 3: Plot with annotations\nfig_ai = px.bar(\n    top_states_ai,\n    x='STATE_NAME',\n    y='SALARY',\n    text='SALARY',  # ➜ Show salary values\n    title='Top 10 States by Average AI Job Salary',\n    labels={'STATE_NAME': 'State', 'SALARY': 'Average Salary'},\n    color_discrete_sequence=['pink'],\n    height=500\n)\n\n# Format labels\nfig_ai.update_traces(\n    texttemplate='$%{text:,.0f}',  # format as currency with no decimals\n    textposition='outside'\n)\n\n# Optional layout tweaks\nfig_ai.update_layout(\n    uniformtext_minsize=8,\n    uniformtext_mode='hide'\n)\n\nfig_ai.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nMontana leads with the highest average AI salary at $139,220, followed by Washington, Louisiana, and California, all exceeding $125,000. While expected tech hubs like California appear, the inclusion of Montana and Louisiana suggests high-paying AI roles exist beyond traditional markets. All top 10 states offer over $122,000, reflecting a strong nationwide demand and competitive pay for AI professionals.\n\nimport plotly.express as px\n\n# Step 3: Filter top 10 Non-AI states\ntop_states_nonai = avg_salary[avg_salary['IS_AI_CAREER'] == 0].sort_values('SALARY', ascending=False).head(10)\n\n# Create bar chart with annotations\nfig_nonai = px.bar(\n    top_states_nonai,\n    x='STATE_NAME',\n    y='SALARY',\n    text='SALARY',  # &lt;== Add this line\n    title='Top 10 States by Average Non-AI Job Salary',\n    labels={'STATE_NAME': 'State', 'SALARY': 'Average Salary'},\n    color_discrete_sequence=['skyblue'],\n    height=600\n)\n\n# Format annotations\nfig_nonai.update_traces(\n    texttemplate='$%{text:,.0f}',  # format as currency\n    textposition='outside'\n)\n\nfig_nonai.update_layout(\n    uniformtext_minsize=8,\n    uniformtext_mode='hide'\n)\n\nfig_nonai.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\nVermont and Connecticut lead the top 10 states for average Non-AI job salaries, with averages of $121,885 and $121,866, respectively. States like Washington, California, and Arkansas closely follow, all offering Non-AI salaries above $120,000, reflecting strong compensation even outside of AI-focused roles. Notably, traditional high-income states such as Massachusetts, New Jersey, and Virginia also appear, indicating a consistent national demand for skilled Non-AI professionals. The narrow salary range—from $118,305 to $121,885—shows stable and competitive earnings across top states, emphasizing that Non-AI careers continue to offer strong salary potential in diverse regions.\n\ndf.columns.to_list()\n\n['ID',\n 'LAST_UPDATED_DATE',\n 'LAST_UPDATED_TIMESTAMP',\n 'DUPLICATES',\n 'POSTED',\n 'EXPIRED',\n 'DURATION',\n 'SOURCE_TYPES',\n 'SOURCES',\n 'URL',\n 'ACTIVE_URLS',\n 'TITLE_RAW',\n 'BODY',\n 'MODELED_EXPIRED',\n 'MODELED_DURATION',\n 'COMPANY',\n 'COMPANY_NAME',\n 'COMPANY_RAW',\n 'COMPANY_IS_STAFFING',\n 'EDUCATION_LEVELS',\n 'EDUCATION_LEVELS_NAME',\n 'MIN_EDULEVELS',\n 'MIN_EDULEVELS_NAME',\n 'EMPLOYMENT_TYPE',\n 'EMPLOYMENT_TYPE_NAME',\n 'MIN_YEARS_EXPERIENCE',\n 'IS_INTERNSHIP',\n 'SALARY',\n 'REMOTE_TYPE',\n 'REMOTE_TYPE_NAME',\n 'ORIGINAL_PAY_PERIOD',\n 'SALARY_TO',\n 'SALARY_FROM',\n 'LOCATION',\n 'CITY',\n 'CITY_NAME',\n 'COUNTY',\n 'COUNTY_NAME',\n 'MSA',\n 'MSA_NAME',\n 'STATE',\n 'STATE_NAME',\n 'COUNTY_OUTGOING',\n 'COUNTY_NAME_OUTGOING',\n 'COUNTY_INCOMING',\n 'COUNTY_NAME_INCOMING',\n 'MSA_OUTGOING',\n 'MSA_NAME_OUTGOING',\n 'MSA_INCOMING',\n 'MSA_NAME_INCOMING',\n 'NAICS2',\n 'NAICS2_NAME',\n 'NAICS3',\n 'NAICS3_NAME',\n 'NAICS4',\n 'NAICS4_NAME',\n 'NAICS5',\n 'NAICS5_NAME',\n 'NAICS6',\n 'NAICS6_NAME',\n 'TITLE',\n 'TITLE_NAME',\n 'TITLE_CLEAN',\n 'SKILLS',\n 'SKILLS_NAME',\n 'SPECIALIZED_SKILLS',\n 'SPECIALIZED_SKILLS_NAME',\n 'CERTIFICATIONS',\n 'CERTIFICATIONS_NAME',\n 'COMMON_SKILLS',\n 'COMMON_SKILLS_NAME',\n 'SOFTWARE_SKILLS',\n 'SOFTWARE_SKILLS_NAME',\n 'ONET',\n 'ONET_NAME',\n 'ONET_2019',\n 'ONET_2019_NAME',\n 'CIP6',\n 'CIP6_NAME',\n 'CIP4',\n 'CIP4_NAME',\n 'CIP2',\n 'CIP2_NAME',\n 'SOC_2021_2',\n 'SOC_2021_2_NAME',\n 'SOC_2021_3',\n 'SOC_2021_3_NAME',\n 'SOC_2021_4',\n 'SOC_2021_4_NAME',\n 'SOC_2021_5',\n 'SOC_2021_5_NAME',\n 'LOT_CAREER_AREA',\n 'LOT_CAREER_AREA_NAME',\n 'LOT_OCCUPATION',\n 'LOT_OCCUPATION_NAME',\n 'LOT_SPECIALIZED_OCCUPATION',\n 'LOT_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_OCCUPATION_GROUP',\n 'LOT_OCCUPATION_GROUP_NAME',\n 'LOT_V6_SPECIALIZED_OCCUPATION',\n 'LOT_V6_SPECIALIZED_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION',\n 'LOT_V6_OCCUPATION_NAME',\n 'LOT_V6_OCCUPATION_GROUP',\n 'LOT_V6_OCCUPATION_GROUP_NAME',\n 'LOT_V6_CAREER_AREA',\n 'LOT_V6_CAREER_AREA_NAME',\n 'SOC_2',\n 'SOC_2_NAME',\n 'SOC_3',\n 'SOC_3_NAME',\n 'SOC_4',\n 'SOC_4_NAME',\n 'SOC_5',\n 'SOC_5_NAME',\n 'NAICS_2022_2',\n 'NAICS_2022_2_NAME',\n 'NAICS_2022_3',\n 'NAICS_2022_3_NAME',\n 'NAICS_2022_4',\n 'NAICS_2022_4_NAME',\n 'NAICS_2022_5',\n 'NAICS_2022_5_NAME',\n 'NAICS_2022_6',\n 'NAICS_2022_6_NAME',\n 'IS_AI_CAREER',\n 'YEAR',\n 'MONTH']\n\n\n\n\n\n2. Side-by-Side Bar Chart: Top States by Salary (AI vs. Non-AI)\n\nimport pandas as pd\nimport plotly.express as px\n\n# 1. Filter rows with valid salary and AI flag\ndf_filtered = df.dropna(subset=['SALARY', 'STATE_NAME', 'IS_AI_CAREER'])\n\n# 2. Group and calculate average salary by state and AI category\navg_salary = (\n    df_filtered.groupby(['STATE_NAME', 'IS_AI_CAREER'])['SALARY']\n    .mean()\n    .reset_index()\n)\n\n# 3. Pivot table to create separate columns for AI and Non-AI\npivot_salary = avg_salary.pivot(index='STATE_NAME', columns='IS_AI_CAREER', values='SALARY').dropna()\n\n# 4. Select top 10 states based on average of both categories\ntop_states = pivot_salary.mean(axis=1).sort_values(ascending=False).head(10).index\npivot_salary = pivot_salary.loc[top_states]\n\n# 5. Rename columns for clarity\npivot_salary.columns = ['Non-AI', 'AI']\n\n# 6. Convert to long format for Plotly\nplot_data = pivot_salary.reset_index().melt(id_vars='STATE_NAME', var_name='Career Type', value_name='Average Salary')\n\n# 7. Plot with custom colors\nfig = px.bar(\n    plot_data,\n    x='STATE_NAME',\n    y='Average Salary',\n    color='Career Type',\n    barmode='group',\n    title='Top States by Average Salary: AI vs. Non-AI Jobs',\n    labels={'STATE_NAME': 'State'},\n    height=600,\n    width=1000,\n    color_discrete_map={'AI': 'pink', 'Non-AI': 'skyblue'}\n)\n\nfig.update_layout(xaxis_tickangle=45)\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nAI careers consistently outperform Non-AI roles in average salary across all top states, as shown by the higher pink bars. Montana shows the largest gap, with AI salaries significantly exceeding Non-AI averages, suggesting strong demand or limited AI talent in that region. States like Washington, California, and Louisiana also offer notably higher compensation for AI professionals, reinforcing their positions as emerging or established tech hubs. In contrast, states like New Jersey and Washington, D.C. show a smaller salary gap, indicating more balanced compensation across career types. Overall, this chart highlights the premium value placed on AI expertise across the U.S., with varying intensity by state.\n\n\n\nAre remote jobs better paying than in-office roles?\n\nViolin Plot: Salary by Remote Type\n\nimport plotly.graph_objects as go\n\n# Get unique remote job types\nremote_types = df['REMOTE_TYPE_NAME'].dropna().unique()\n\n# Create violin traces for each remote type\nfig = go.Figure()\n\nfor job_type in remote_types:\n    fig.add_trace(go.Violin(\n        x=[job_type] * len(df[df['REMOTE_TYPE_NAME'] == job_type]),\n        y=df[df['REMOTE_TYPE_NAME'] == job_type]['SALARY'],\n        name=job_type,\n        box_visible=True,\n        meanline_visible=True,\n        points=False  # Set to 'all' if you want to show individual data points\n    ))\n\n# Update layout\nfig.update_layout(\n    title='Salary Distribution: Remote vs. In-Office vs. Hybrid',\n    xaxis_title='Job Type',\n    yaxis_title='Salary',\n    height=600,\n    width=800\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\nAll job types—Remote, Not Remote, Hybrid, and Unspecified—share a similar median salary of around $116k, indicating a consistent central pay level across formats. However, Remote and Hybrid jobs show more compact salary distributions, with fewer extreme values, suggesting greater predictability in compensation. In contrast, Not Remote jobs have the widest spread, with salaries ranging from as low as $15.86k to over $370k, reflecting higher variability and outliers in traditional office roles. The [None] category includes the highest maximum salary ($500k) but also likely reflects incomplete data. Overall, Hybrid roles show a balanced distribution with relatively high mean and low variance, suggesting they offer stable and competitive compensation. This analysis highlights that while median pay is steady across job types, in-office jobs carry more variability, and hybrid roles offer strong salary consistency with moderate upside.\n\n\n\n3. Bar Chart: Mean or Median Salary by Remote Type\n\nimport plotly.express as px\n\n# Compute mean salary by job type\nmean_salary = df.groupby('REMOTE_TYPE_NAME')['SALARY'].mean().sort_values(ascending=False).reset_index()\n\n# Create bar chart with annotations\nfig = px.bar(\n    mean_salary,\n    x='REMOTE_TYPE_NAME',\n    y='SALARY',\n    text='SALARY',  # Add value labels\n    title='Average Salary by Job Type (Remote vs. In-Office vs. Hybrid)',\n    labels={'REMOTE_TYPE_NAME': 'Job Type', 'SALARY': 'Average Salary'},\n    color_discrete_sequence=['skyblue'],\n    height=500,\n    width=700\n)\n\n# Format salary annotations\nfig.update_traces(texttemplate='$%{text:,.0f}', textposition='outside')\n\n# Adjust layout\nfig.update_layout(\n    xaxis_tickangle=0,\n    uniformtext_minsize=10,\n    uniformtext_mode='hide'  # hide labels if they overlap\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nRemote jobs offer the highest average salary at $117,585, slightly ahead of the [None] category ($117,096) and Hybrid Remote roles ($115,740). Not Remote (in-office) jobs have the lowest average salary at $110,282, suggesting that flexible work arrangements tend to be associated with higher pay. The narrow difference between Remote and Hybrid roles indicates that both fully and partially remote positions maintain competitive compensation, likely due to demand for specialized skills and work-life balance preferences. This trend highlights a salary advantage for remote-capable roles in today’s evolving job market.\n\n\n\nWhat industries saw the biggest wage growth in 2024?\n\n\n1. Calculate Wage Growth Percent by Industry\n\ndf['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\ndf['YEAR'] = df['POSTED'].dt.year\n\n# Group by industry and year, then get mean salary\nindustry_year = df[df['YEAR'].isin([2023, 2024])].groupby(['NAICS2_NAME', 'YEAR'])['SALARY'].mean().unstack()\n\n# Calculate growth percentage\nindustry_year['WAGE_GROWTH_%'] = 100 * (industry_year[2024] - industry_year[2024]) / industry_year[2024]\n# Remove industries without both years' data\nindustry_year = industry_year.dropna(subset=[2024, 2024])\n\n\ndf['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\ndf['YEAR'] = df['POSTED'].dt.year\n\n# Group by industry and year, then get mean salary\nindustry_year = (\n    df[df['YEAR'].isin([2023, 2024])]\n    .groupby(['NAICS2_NAME', 'YEAR'])['SALARY']\n    .mean()\n    .unstack()\n)\n\n# Only keep industries with data for both years\nindustry_year = industry_year.dropna(subset=[2024, 2024])\n\n# Calculate growth percentage safely\nindustry_year['WAGE_GROWTH_%'] = 100 * (industry_year[2024] - industry_year[2024]) / industry_year[2024]\n\n\nprint(industry_year.columns)\n\nIndex([2024, 'WAGE_GROWTH_%'], dtype='object', name='YEAR')\n\n\n\nimport plotly.express as px\n\n# Compute top 10 industries by average salary for 2024\nindustry_salary_2024 = (\n    df[df['YEAR'] == 2024]\n    .groupby('NAICS2_NAME')['SALARY']\n    .mean()\n    .sort_values(ascending=False)\n    .head(10)\n    .reset_index()\n)\n\n# Create interactive bar chart with annotations\nfig = px.bar(\n    industry_salary_2024,\n    x='NAICS2_NAME',\n    y='SALARY',\n    text='SALARY',  # This adds labels on top of bars\n    title='Top 10 Highest Paying Industries (2024)',\n    labels={'NAICS2_NAME': 'Industry', 'SALARY': 'Average Salary'},\n    color_discrete_sequence=['pink'],\n    height=650,\n    width=900\n)\n\n# Format text labels (e.g., $120,000)\nfig.update_traces(texttemplate='$%{text:,.0f}', textposition='outside')\n\nfig.update_layout(\n    xaxis_tickangle=45,\n    uniformtext_minsize=10,\n    uniformtext_mode='hide'  # hides overlapping labels\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nimport plotly.express as px\n\nindustry_salary_2024 = (\n    df[df['YEAR'] == 2024]\n    .groupby('NAICS2_NAME')['SALARY']\n    .mean()\n    .sort_values(ascending=False)\n    .head(10)\n    .reset_index()\n)\n\nfig = px.bar(\n    industry_salary_2024,\n    x='NAICS2_NAME',\n    y='SALARY',\n    title='Top 10 Highest Paying Industries (2024)',\n    labels={'NAICS2_NAME': 'Industry', 'SALARY': 'Average Salary'},\n    color='SALARY',\n    color_continuous_scale='Greens'\n)\n\nfig.update_layout(\n    xaxis_tickangle=45,\n    template='plotly_white'\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nThe Information industry ranks as the highest-paying sector in 2024, offering an average salary near $130,000, followed closely by Accommodation and Food Services, which surprisingly outperforms more technical fields. Industries like Professional, Scientific, and Technical Services, Retail Trade, and Manufacturing round out the middle tier, showing strong but slightly lower average salaries. Toward the lower end, Utilities, Construction, and Wholesale Trade still offer competitive earnings above $110,000, reflecting steady demand. This data suggests that high-paying opportunities are not limited to tech-focused sectors, and emerging or service-oriented industries are also rewarding skilled talent well.\n\nimport plotly.express as px\n\n# Optional: remove rows with missing salary values\nscatter_df = df.dropna(subset=['SALARY_FROM', 'SALARY_TO', 'IS_AI_CAREER'])\n\n# Optional: limit outliers for clearer visualization\nscatter_df = scatter_df[(scatter_df['SALARY_FROM'] &lt; 200000) & (scatter_df['SALARY_TO'] &lt; 250000)]\n\n# Plot\nfig = px.scatter(\n    scatter_df,\n    x='SALARY_FROM',\n    y='SALARY_TO',\n    color='IS_AI_CAREER',\n    labels={'IS_AI_CAREER': 'AI Job'},\n    title='Scatter Plot: Salary From vs. Salary To (AI vs. Non-AI)',\n    hover_data=['TITLE_CLEAN', 'STATE_NAME'],\n    color_discrete_map={0: 'skyblue', 1: 'orange'}\n)\n\nfig.update_layout(template='plotly_white')\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n# Regenerate the DataFrame correctly\ndf['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\n\ndaily_avg_salary = (\n    df[df['POSTED'].dt.year == 2024]\n    .groupby([df['POSTED'].dt.date, 'IS_AI_CAREER'])['SALARY']\n    .mean()\n    .reset_index()\n)\n\ndaily_avg_salary.columns = ['Date', 'AI Job', 'Avg Salary']\n\n\nimport plotly.express as px\n\nfig = px.line(\n    daily_avg_salary,\n    x='Date',\n    y='Avg Salary',\n    color='AI Job',\n    color_discrete_map={0: 'blue', 1: 'orange'},\n    labels={'AI Job': 'Career Type'},\n    title='📈 Daily Average Salary Trend (AI vs Non-AI Jobs) - 2024'\n)\n\nfig.update_layout(\n    xaxis_title='Date Posted',\n    yaxis_title='Average Salary',\n    legend_title='Job Type',\n    template='plotly_white'\n)\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\nInsights & Interpretation: Daily Average Salary Trend (AI vs Non-AI Jobs) – 2024\nAI job salaries (orange line) show high volatility, fluctuating significantly day to day. This may indicate greater variability in compensation for niche roles, contract work, or high-value short-term positions.\nNon-AI job salaries (blue line) are more stable, maintaining a steady average throughout the year. This suggests traditional roles have more standardized pay structures.\nWhile peaks in AI salaries occasionally rise well above Non-AI levels, they are not sustained, highlighting inconsistency in AI pay trends.\nThe overall average levels between the two are relatively close, with occasional days where Non-AI jobs slightly outperform.\nThis trend implies that AI roles carry more earning potential but also more risk or inconsistency, whereas Non-AI roles offer more predictability and salary stability.\n\n\nForcast the AI vs. Non-AI Job Count for next 2 years\n\n1. Prepare the Time Series Data\n\ndf['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\ndf['YEAR_MONTH'] = df['POSTED'].dt.to_period('M').dt.to_timestamp()\n\n# Filter to keep valid salaries and group monthly\nmonthly_salary = (\n    df[df['SALARY'].notna()]\n    .groupby(['YEAR_MONTH', 'IS_AI_CAREER'])['SALARY']\n    .mean()\n    .reset_index()\n)\n\n\n\n2. Pivot into Time Series Format (AI vs. Non-AI)\n\nsalary_ts = monthly_salary.pivot(index='YEAR_MONTH', columns='IS_AI_CAREER', values='SALARY')\nsalary_ts.columns = ['Non-AI', 'AI']\n\n\n!pip3 install statsmodels\n\nRequirement already satisfied: statsmodels in c:\\python312\\lib\\site-packages (0.14.4)\nRequirement already satisfied: numpy&lt;3,&gt;=1.22.3 in c:\\python312\\lib\\site-packages (from statsmodels) (2.1.3)\nRequirement already satisfied: scipy!=1.9.2,&gt;=1.8 in c:\\python312\\lib\\site-packages (from statsmodels) (1.15.2)\nRequirement already satisfied: pandas!=2.1.0,&gt;=1.4 in c:\\python312\\lib\\site-packages (from statsmodels) (2.2.3)\nRequirement already satisfied: patsy&gt;=0.5.6 in c:\\python312\\lib\\site-packages (from statsmodels) (1.0.1)\nRequirement already satisfied: packaging&gt;=21.3 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from statsmodels) (24.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from pandas!=2.1.0,&gt;=1.4-&gt;statsmodels) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\python312\\lib\\site-packages (from pandas!=2.1.0,&gt;=1.4-&gt;statsmodels) (2024.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\python312\\lib\\site-packages (from pandas!=2.1.0,&gt;=1.4-&gt;statsmodels) (2024.2)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas!=2.1.0,&gt;=1.4-&gt;statsmodels) (1.16.0)\n\n\n\n[notice] A new release of pip is available: 24.0 -&gt; 25.1\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\n\n3. Forecast Using Exponential Smoothing (or SARIMA)\n\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\n# Forecast function\ndef forecast_salary(series, label):\n    model = ExponentialSmoothing(series, trend='add', seasonal=None)\n    fitted = model.fit()\n    forecast = fitted.forecast(24)  # 24 months (2 years)\n    return forecast\n\nforecast_ai = forecast_salary(salary_ts['AI'].dropna(), 'AI')\nforecast_nonai = forecast_salary(salary_ts['Non-AI'].dropna(), 'Non-AI')\n\nC:\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning:\n\nNo frequency information was provided, so inferred frequency MS will be used.\n\nC:\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning:\n\nNo frequency information was provided, so inferred frequency MS will be used.\n\n\n\n\n\n4. Combine Forecasts and Plot\n\nimport plotly.graph_objects as go\n\n# Create timeline for future months\nfuture_dates = pd.date_range(start=salary_ts.index[-1] + pd.offsets.MonthBegin(),\n                             periods=24, freq='MS')\n\nfig = go.Figure()\n\n# Historical\nfig.add_trace(go.Scatter(x=salary_ts.index, y=salary_ts['AI'], name='AI Salary (Actual)', line=dict(color='orange')))\nfig.add_trace(go.Scatter(x=salary_ts.index, y=salary_ts['Non-AI'], name='Non-AI Salary (Actual)', line=dict(color='blue')))\n\n# Forecast\nfig.add_trace(go.Scatter(x=future_dates, y=forecast_ai, name='AI Salary (Forecast)', line=dict(color='orange', dash='dash')))\nfig.add_trace(go.Scatter(x=future_dates, y=forecast_nonai, name='Non-AI Salary (Forecast)', line=dict(color='blue', dash='dash')))\n\nfig.update_layout(\n    title='📈 AI vs. Non-AI Salary Forecast (Next 2 Years)',\n    xaxis_title='Month',\n    yaxis_title='Average Salary',\n    template='plotly_white'\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\nInsights & Interpretation: AI vs. Non-AI Salary Forecast (Next 2 Years)\nAI Job Salaries are projected to grow gradually, rising from around $120K to $127K by mid-2026. This reflects steady but modest growth, suggesting a mature and stabilizing market.\nNon-AI Job Salaries are expected to grow more rapidly, increasing from $119K to $151K, indicating accelerated demand or catch-up effect in traditional roles.\nDespite AI jobs currently offering higher salaries, the forecast suggests Non-AI roles may surpass AI roles in average salary within two years if current trends persist.\nThis shift may imply increasing skill premiums in non-AI sectors adopting AI technologies, or structural salary inflation in conventional domains.\nStrategic takeaway: Organizations may need to re-evaluate compensation frameworks and talent retention strategies, especially in non-AI functions undergoing transformation.\n\n\n\n\n1. Linear Regression\n\n%pip install scikit-learn\n\nRequirement already satisfied: scikit-learn in c:\\python312\\lib\\site-packages (1.6.1)\nRequirement already satisfied: numpy&gt;=1.19.5 in c:\\python312\\lib\\site-packages (from scikit-learn) (2.1.3)\nRequirement already satisfied: scipy&gt;=1.6.0 in c:\\python312\\lib\\site-packages (from scikit-learn) (1.15.2)\nRequirement already satisfied: joblib&gt;=1.2.0 in c:\\python312\\lib\\site-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl&gt;=3.1.0 in c:\\python312\\lib\\site-packages (from scikit-learn) (3.6.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n[notice] A new release of pip is available: 24.0 -&gt; 25.1\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\n# 1. Import required libraries\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nimport pandas as pd\nimport numpy as np\n\n# 3. Select features and target\nfeatures = ['STATE_NAME', 'TITLE_CLEAN', 'SKILLS_NAME']\ntarget = 'SALARY'\n\n# 4. Drop missing values in required columns\ndf_reg = df.dropna(subset=features + [target])\n\n# 5. Define X and y\nX = df_reg[features]\ny = df_reg[target]\n\n# 6. Train-test split (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\n# 7. Preprocessor: one-hot encode categorical features\npreprocessor = ColumnTransformer([\n    ('cat', OneHotEncoder(handle_unknown='ignore'), features)\n])\n\n# 8. Build pipeline with preprocessing + Linear Regression\nreg_model = Pipeline([\n    ('preprocess', preprocessor),\n    ('regressor', LinearRegression())\n])\n\n# 9. Fit the model\nreg_model.fit(X_train, y_train)\n\n# 10. Evaluate\ntrain_score = reg_model.score(X_train, y_train)\ntest_score = reg_model.score(X_test, y_test)\n\nprint(f\" Train R²: {train_score:.4f}\")\nprint(f\" Test R²: {test_score:.4f}\")\n\n Train R²: 0.9808\n Test R²: 0.5143\n\n\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Make predictions\ny_pred = reg_model.predict(X_test)\n\n# R² Score\nr2 = r2_score(y_test, y_pred)\n\n# MSE\nmse = mean_squared_error(y_test, y_pred)\n\n# RMSE\nrmse = np.sqrt(mse)\n\n# Print evaluation metrics\nprint(\"Linear Regression Train R²:\", reg_model.score(X_train, y_train))\nprint(\"Linear Regression Test R²:\", r2)\nprint(f\"Linear Regression MSE: {mse:,.2f}\")\nprint(f\"Linear Regression RMSE: {rmse:,.2f}\")\n\nLinear Regression Train R²: 0.9808207991321921\nLinear Regression Test R²: 0.5143198085664493\nLinear Regression MSE: 417,140,293.37\nLinear Regression RMSE: 20,424.01\n\n\n\n# Keep top 50 titles\ntop_titles = df_reg['TITLE_CLEAN'].value_counts().nlargest(50).index\ndf_reg['TITLE_CLEAN'] = df_reg['TITLE_CLEAN'].where(df_reg['TITLE_CLEAN'].isin(top_titles), 'Other')\n\n# Keep top 50 skills\ntop_skills = df_reg['SKILLS_NAME'].value_counts().nlargest(50).index\ndf_reg['SKILLS_NAME'] = df_reg['SKILLS_NAME'].where(df_reg['SKILLS_NAME'].isin(top_skills), 'Other')\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Get predictions\ny_pred = reg_model.predict(X_test)\n\n# Create a DataFrame to plot\nresults_df = pd.DataFrame({\n    'Actual Salary': y_test,\n    'Predicted Salary': y_pred\n})\n\n# Plot using Plotly\nfig = px.scatter(\n    results_df,\n    x='Actual Salary',\n    y='Predicted Salary',\n    title='Predicted vs Actual Salary (Plotly)',\n    labels={'x': 'Actual Salary', 'y': 'Predicted Salary'},\n    opacity=0.6\n)\n\n# Add reference line (y = x)\nfig.add_shape(\n    type='line',\n    x0=results_df['Actual Salary'].min(),\n    y0=results_df['Actual Salary'].min(),\n    x1=results_df['Actual Salary'].max(),\n    y1=results_df['Actual Salary'].max(),\n    line=dict(color='red', dash='dash'),\n)\n\nfig.update_layout(template='plotly_white')\nfig.show()"
  },
  {
    "objectID": "salary_trend_analysis.html#ridge-regression",
    "href": "salary_trend_analysis.html#ridge-regression",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Ridge Regression",
    "text": "Ridge Regression\n\nfrom sklearn.linear_model import Ridge\n\nreg_model = Pipeline([\n    ('preprocess', preprocessor),\n    ('regressor', Ridge(alpha=1.0))\n])\nreg_model.fit(X_train, y_train)\nprint(\"Train R²:\", reg_model.score(X_train, y_train))\nprint(\"Test R²:\", reg_model.score(X_test, y_test))\n\nTrain R²: 0.907764733484408\nTest R²: 0.5418666997879171\n\n\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import r2_score, mean_squared_error\nimport numpy as np\nfrom sklearn.pipeline import Pipeline\n\n# Create and train Ridge Regression pipeline\nreg_model = Pipeline([\n    ('preprocess', preprocessor),\n    ('regressor', Ridge(alpha=1.0))\n])\n\nreg_model.fit(X_train, y_train)\n\n# Predict on test set\ny_pred = reg_model.predict(X_test)\n\n# Evaluate metrics\nr2 = r2_score(y_test, y_pred)\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\n\n# Output results\nprint(\"Ridge Regression Train R²:\", reg_model.score(X_train, y_train))\nprint(\"Ridge Regression Test R²:\", r2)\nprint(f\"Ridge Regression MSE: {mse:,.2f}\")\nprint(f\"Ridge Regression RMSE: {rmse:,.2f}\")\n\nRidge Regression Train R²: 0.907764733484408\nRidge Regression Test R²: 0.5418666997879171\nRidge Regression MSE: 393,480,859.68\nRidge Regression RMSE: 19,836.35\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Predict using your trained model\ny_pred = reg_model.predict(X_test)\n\n# Create DataFrame for plotting\nresults_df = pd.DataFrame({\n    'Actual Salary': y_test,\n    'Predicted Salary': y_pred\n})\n\n# Create scatter plot\nfig = px.scatter(\n    results_df,\n    x='Actual Salary',\n    y='Predicted Salary',\n    title='Ridge Regression: Predicted vs Actual Salary',\n    opacity=0.6,\n    template='plotly_white'\n)\n\n# Add reference diagonal (perfect predictions)\nfig.add_shape(\n    type='line',\n    x0=results_df['Actual Salary'].min(),\n    y0=results_df['Actual Salary'].min(),\n    x1=results_df['Actual Salary'].max(),\n    y1=results_df['Actual Salary'].max(),\n    line=dict(color='red', dash='dash'),\n)\n\nfig.update_layout(\n    xaxis_title='Actual Salary',\n    yaxis_title='Predicted Salary'\n)\n\nfig.show()"
  },
  {
    "objectID": "salary_trend_analysis.html#random-forest",
    "href": "salary_trend_analysis.html#random-forest",
    "title": "Exploratory Data Analysis (EDA)",
    "section": "Random Forest",
    "text": "Random Forest\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\n# Select features and target\nfeatures = ['STATE_NAME', 'TITLE_CLEAN', 'SKILLS_NAME']\ntarget = 'SALARY'\n\n# Drop missing values\ndf_rf = df.dropna(subset=features + [target]).copy()\n\n# Optionally reduce cardinality\ntop_titles = df_rf['TITLE_CLEAN'].value_counts().nlargest(50).index\ndf_rf['TITLE_CLEAN'] = df_rf['TITLE_CLEAN'].where(df_rf['TITLE_CLEAN'].isin(top_titles), 'Other')\ntop_skills = df_rf['SKILLS_NAME'].value_counts().nlargest(50).index\ndf_rf['SKILLS_NAME'] = df_rf['SKILLS_NAME'].where(df_rf['SKILLS_NAME'].isin(top_skills), 'Other')\n\n# Define features and target\nX = df_rf[features]\ny = df_rf[target]\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Preprocessing\npreprocessor = ColumnTransformer([\n    ('cat', OneHotEncoder(handle_unknown='ignore'), features)\n])\n\n# Define Random Forest model pipeline\nrf_model = Pipeline([\n    ('preprocess', preprocessor),\n    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n])\n\n# Train the model\nrf_model.fit(X_train, y_train)\n\nPipeline(steps=[('preprocess',\n                 ColumnTransformer(transformers=[('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['STATE_NAME', 'TITLE_CLEAN',\n                                                   'SKILLS_NAME'])])),\n                ('regressor', RandomForestRegressor(random_state=42))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.Pipeline?Documentation for PipelineiFittedPipeline(steps=[('preprocess',\n                 ColumnTransformer(transformers=[('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['STATE_NAME', 'TITLE_CLEAN',\n                                                   'SKILLS_NAME'])])),\n                ('regressor', RandomForestRegressor(random_state=42))]) preprocess: ColumnTransformer?Documentation for preprocess: ColumnTransformerColumnTransformer(transformers=[('cat', OneHotEncoder(handle_unknown='ignore'),\n                                 ['STATE_NAME', 'TITLE_CLEAN', 'SKILLS_NAME'])]) cat['STATE_NAME', 'TITLE_CLEAN', 'SKILLS_NAME'] OneHotEncoder?Documentation for OneHotEncoderOneHotEncoder(handle_unknown='ignore') RandomForestRegressor?Documentation for RandomForestRegressorRandomForestRegressor(random_state=42) \n\n\n\nfrom sklearn.metrics import r2_score, mean_squared_error\n\n# Predict\ny_pred = rf_model.predict(X_test)\n\n# Metrics\nr2 = r2_score(y_test, y_pred)\nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\n\nprint(f\"Random Forest R² Score: {r2:.4f}\")\nprint(f\"Random Forest MSE: {mse:,.2f}\")\nprint(f\"Random Forest RMSE: {rmse:,.2f}\")\n\nRandom Forest R² Score: 0.1253\nRandom Forest MSE: 751,237,715.95\nRandom Forest RMSE: 27,408.72\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\ny_pred = rf_model.predict(X_test)\nresults_df = pd.DataFrame({'Actual Salary': y_test, 'Predicted Salary': y_pred})\n\nfig = px.scatter(\n    results_df,\n    x='Actual Salary',\n    y='Predicted Salary',\n    title='Random Forest: Predicted vs Actual Salary',\n    opacity=0.6\n)\nfig.add_shape(\n    type='line',\n    x0=results_df['Actual Salary'].min(),\n    y0=results_df['Actual Salary'].min(),\n    x1=results_df['Actual Salary'].max(),\n    y1=results_df['Actual Salary'].max(),\n    line=dict(color='red', dash='dash')\n)\nfig.update_layout(template='plotly_white')\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nInterpretation :\n\nLinear Regression Train R²: 0.9808 — The model fits the training data extremely well, explaining over 98% of salary variance.\n\nTest R²: 0.5143 — Performance drops on unseen data, indicating overfitting.\nMSE: 417M | RMSE: $20,424 — Moderate prediction error.\nInterpretation: Linear regression captures the relationship between location, job title, and skills effectively in training, but generalizes less well. This suggests it’s overly tuned to patterns in the training set.\n\nRidge Regression (Regularized Linear Model) Train R²: 0.9078 — Slightly lower than linear regression, but more realistic.\n\nTest R²: 0.5419 — Best generalization performance of the three models.\nMSE: 393M | RMSE: $19,836 — Lowest error overall.\nInterpretation: Ridge regression controls overfitting by penalizing large coefficients, making it robust even with high-cardinality features (e.g., job titles, skills). It performs the best in balancing bias and variance. Business Insight: Use this model for reliable salary predictions and decision-making across diverse job profiles.\n\nRandom Forest Regression Test R²: 0.1253 — Very low explanatory power on unseen data.\n\nMSE: 751M | RMSE: $27,408 — Highest error among all models.\nInterpretation: Random Forest is underperforming, likely due to:\nSparse or high-cardinality features (like long skill/job title text).\nLack of feature engineering (e.g., keyword extraction).\nThe model’s tendency to overfit without fine-tuning on small categorical encodings.\nBusiness Insight: Avoid using this version of Random Forest for salary prediction without deeper preprocessing (feature importance, dimensionality reduction, or NLP).\n\n\nK-Means Clustering\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n# Prepare features for clustering (use code numbers, not names)\nfeatures = ['SOC_2021_2', 'NAICS2']  # Change as needed\ndf_cluster = df.dropna(subset=features).copy()\n\n# Convert categorical codes to numbers (if needed)\nfor col in features:\n    df_cluster[col] = LabelEncoder().fit_transform(df_cluster[col].astype(str))\n\nX = df_cluster[features]\nX_scaled = StandardScaler().fit_transform(X)\n\n# Find the optimal number of clusters (Elbow Method)\ninertia = []\nfor k in range(2, 11):\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(X_scaled)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(range(2, 11), inertia, marker='o')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.title('Elbow Method For Optimal k')\nplt.show()\n\n# Let's use 3 clusters (or your elbow result)\nkmeans = KMeans(n_clusters=3, random_state=42)\ndf_cluster['Cluster'] = kmeans.fit_predict(X_scaled)\n\nprint(df_cluster.groupby('Cluster').size())\n\n\n\n\n\n\n\n\nCluster\n0    49246\n1    12019\n2    11211\ndtype: int64\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Prepare elbow data\nelbow_df = pd.DataFrame({\n    'k': list(range(2, 11)),\n    'inertia': inertia\n})\n\n# Create line plot\nfig = px.line(\n    elbow_df,\n    x='k',\n    y='inertia',\n    markers=True,\n    title='Elbow Method for Optimal k',\n    labels={'k': 'Number of Clusters', 'inertia': 'Inertia'}\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nElbow Method Interpretation\nThe line plot represents the inertia (sum of squared distances to cluster centers) for various values of k (number of clusters): • The sharp drop between k=2 and k=3 suggests that moving from 2 to 3 clusters significantly reduces the within-cluster variance. • Beyond k=3, the rate of decrease in inertia flattens, indicating diminishing returns in model improvement. • This “elbow point” at k=3 is a strong indicator that 3 clusters is optimal for this dataset. Conclusion: k = 3 is the most meaningful and cost-effective number of clusters for this segmentation task. Balanced clustering (not too skewed) with clearly separable groups makes this output suitable for: Job market segmentation, Tailored salary or skill analysis, and Career path recommendation systems\n\ndf_with_titles = df.merge(df_cluster[['ID', 'Cluster']], on='ID')\n\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# For each cluster, analyze keywords in job titles\nfor cluster_num in sorted(df_with_titles['Cluster'].unique()):\n    cluster_data = df_with_titles[df_with_titles['Cluster'] == cluster_num]\n\n    vectorizer = TfidfVectorizer(stop_words='english', max_features=20)\n    tfidf_matrix = vectorizer.fit_transform(cluster_data['TITLE_CLEAN'].astype(str))\n\n    print(f\"\\n🔹 Top Terms in Cluster {cluster_num}:\")\n    print(vectorizer.get_feature_names_out())\n\n\n🔹 Top Terms in Cluster 0:\n['analyst' 'analytics' 'architect' 'associate' 'business' 'cloud'\n 'consultant' 'data' 'enterprise' 'functional' 'intelligence' 'lead'\n 'management' 'manager' 'oracle' 'remote' 'sap' 'senior' 'specialist' 'sr']\n\n🔹 Top Terms in Cluster 1:\n['analyst' 'analytics' 'architect' 'business' 'career' 'cloud'\n 'consultant' 'data' 'enterprise' 'erp' 'functional' 'ii' 'intelligence'\n 'lead' 'oracle' 'path' 'remote' 'sap' 'senior' 'sr']\n\n🔹 Top Terms in Cluster 2:\n['analyst' 'analytics' 'architect' 'business' 'consultant' 'data'\n 'engineer' 'enterprise' 'erp' 'functional' 'ii' 'intelligence' 'lead'\n 'management' 'remote' 'sap' 'senior' 'solution' 'sr' 'systems']\n\n\n\n%pip install wordcloud\n\nRequirement already satisfied: wordcloud in c:\\python312\\lib\\site-packages (1.9.4)\nRequirement already satisfied: numpy&gt;=1.6.1 in c:\\python312\\lib\\site-packages (from wordcloud) (2.1.3)\nRequirement already satisfied: pillow in c:\\python312\\lib\\site-packages (from wordcloud) (11.0.0)\nRequirement already satisfied: matplotlib in c:\\python312\\lib\\site-packages (from wordcloud) (3.9.3)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\python312\\lib\\site-packages (from matplotlib-&gt;wordcloud) (1.3.1)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\python312\\lib\\site-packages (from matplotlib-&gt;wordcloud) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\python312\\lib\\site-packages (from matplotlib-&gt;wordcloud) (4.55.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\python312\\lib\\site-packages (from matplotlib-&gt;wordcloud) (1.4.7)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from matplotlib-&gt;wordcloud) (24.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\python312\\lib\\site-packages (from matplotlib-&gt;wordcloud) (3.2.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from matplotlib-&gt;wordcloud) (2.9.0.post0)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\pooja\\appdata\\roaming\\python\\python312\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;wordcloud) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n[notice] A new release of pip is available: 24.0 -&gt; 25.1\n[notice] To update, run: python.exe -m pip install --upgrade pip\n\n\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Combine titles for each cluster into one string\nfor cluster_num in sorted(df_with_titles['Cluster'].unique()):\n    text = ' '.join(df_with_titles[df_with_titles['Cluster'] == cluster_num]['TITLE_CLEAN'].dropna().astype(str))\n\n    # Create word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(text)\n\n    # Plot\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title(f'🧠 Word Cloud for Cluster {cluster_num}', fontsize=16)\n    plt.show()\n\nC:\\Users\\pooja\\AppData\\Roaming\\Python\\Python312\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 129504 (\\N{BRAIN}) missing from font(s) DejaVu Sans.\n\n\n\n\n\n\n\n\n\n\nC:\\Users\\pooja\\AppData\\Roaming\\Python\\Python312\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 129504 (\\N{BRAIN}) missing from font(s) DejaVu Sans.\n\n\n\n\n\n\n\n\n\n\nC:\\Users\\pooja\\AppData\\Roaming\\Python\\Python312\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning:\n\nGlyph 129504 (\\N{BRAIN}) missing from font(s) DejaVu Sans.\n\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n# Prepare features for clustering (use code numbers, not names)\nfeatures = ['SALARY']  # Change as needed\ndf_cluster = df.dropna(subset=features).copy()\n\n# Convert categorical codes to numbers (if needed)\nfor col in features:\n    df_cluster[col] = LabelEncoder().fit_transform(df_cluster[col].astype(str))\n\nX = df_cluster[features]\nX_scaled = StandardScaler().fit_transform(X)\n\n# Find the optimal number of clusters (Elbow Method)\ninertia = []\nfor k in range(2, 11):\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(X_scaled)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(range(2, 11), inertia, marker='o')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.title('Elbow Method For Optimal k')\nplt.show()\n\n# Let's use 3 clusters (or your elbow result)\nkmeans = KMeans(n_clusters=3, random_state=42)\ndf_cluster['Cluster'] = kmeans.fit_predict(X_scaled)\n\nprint(df_cluster.groupby('Cluster').size())\n\n\n\n\n\n\n\n\nCluster\n0    11626\n1    51814\n2     9036\ndtype: int64\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Prepare elbow data\nelbow_df = pd.DataFrame({\n    'k': list(range(2, 11)),\n    'inertia': inertia\n})\n\n# Create line plot\nfig = px.line(\n    elbow_df,\n    x='k',\n    y='inertia',\n    markers=True,\n    title='Elbow Method for Optimal k',\n    labels={'k': 'Number of Clusters', 'inertia': 'Inertia'}\n)\n\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n\nThe clustering reveals three salary-based segments. Cluster 1 (51,814 jobs) is the largest and likely represents standard salary roles. Cluster 0 (11,626 jobs) reflects mid-range salaries, possibly specialized or region-specific roles. Cluster 2 (9,036 jobs) is the smallest and may capture outliers like high-paying executive roles or low-paying internships. These insights help identify salary norms, deviations, and potential anomalies for strategic compensation planning."
  }
]